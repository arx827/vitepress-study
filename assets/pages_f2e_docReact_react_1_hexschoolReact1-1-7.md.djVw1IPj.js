import{_ as a,c as e,o as i,ae as n}from"./chunks/framework.B2UkztZl.js";const k=JSON.parse('{"title":"React 實戰影音課 1","description":"","frontmatter":{"title":"React 實戰影音課 1"},"headers":[],"relativePath":"pages/f2e/docReact/react/1/hexschoolReact1-1-7.md","filePath":"pages/f2e/docReact/react/1/hexschoolReact1-1-7.md"}'),t={name:"pages/f2e/docReact/react/1/hexschoolReact1-1-7.md"};function l(p,s,c,r,h,o){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="_7-表達式與-react-的關係" tabindex="-1">7. 表達式與 React 的關係 <a class="header-anchor" href="#_7-表達式與-react-的關係" aria-label="Permalink to &quot;7. 表達式與 React 的關係&quot;">​</a></h1><h2 id="打開檔案-intro-expression-html" tabindex="-1">打開檔案 <code>/intro/expression.html</code> <a class="header-anchor" href="#打開檔案-intro-expression-html" aria-label="Permalink to &quot;打開檔案 \`/intro/expression.html\`&quot;">​</a></h2><ul><li>當我們要在 <code>JSX</code> 裡面的大括號加入任何程式碼，請確保它是表達式，它才能正確運行，</li><li>在 <code>React</code> 中 <code>{}</code> 裡只能放 <code>表達式</code>，不能放 <code>陳述式</code>。</li></ul><h2 id="function-寫法" tabindex="-1">Function 寫法 <a class="header-anchor" href="#function-寫法" aria-label="Permalink to &quot;Function 寫法&quot;">​</a></h2><ul><li><p>宣告式</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>表達式</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul>`,5)]))}const u=a(t,[["render",l]]);export{k as __pageData,u as default};
