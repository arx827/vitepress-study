import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.B2UkztZl.js";const c=JSON.parse('{"title":"IT邦 - 讓 TypeScript 成為你全端開發的 ACE !","description":"","frontmatter":{"title":"IT邦 - 讓 TypeScript 成為你全端開發的 ACE !"},"headers":[],"relativePath":"pages/f2e/docTypeScript/it/partI/typeScript-2.md","filePath":"pages/f2e/docTypeScript/it/partI/typeScript-2.md"}'),l={name:"pages/f2e/docTypeScript/it/partI/typeScript-2.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_2-typescript-型別系統概論" tabindex="-1">2 TypeScript 型別系統概論 <a class="header-anchor" href="#_2-typescript-型別系統概論" aria-label="Permalink to &quot;2 TypeScript 型別系統概論&quot;">​</a></h1><h2 id="_2-1-型別系統的兩大基柱-型別的推論與註記" tabindex="-1">2.1 型別系統的兩大基柱 - 型別的推論與註記 <a class="header-anchor" href="#_2-1-型別系統的兩大基柱-型別的推論與註記" aria-label="Permalink to &quot;2.1 型別系統的兩大基柱 - 型別的推論與註記&quot;">​</a></h2><h3 id="_2-1-1-運用型別系統必備的核心觀念" tabindex="-1">2.1.1 運用型別系統必備的核心觀念 <a class="header-anchor" href="#_2-1-1-運用型別系統必備的核心觀念" aria-label="Permalink to &quot;2.1.1 運用型別系統必備的核心觀念&quot;">​</a></h3><ul><li>用 <code>文字</code> 標明該變數或函式的型別的方式稱為 <code>註記 (Annotation)</code>。</li><li>讓程式自己判斷某變數對應其值或運算過後的表達式之結果值的型別，則稱為 <code>推論(Inference)</code>。</li></ul><h3 id="_2-1-2-概觀型別推論與註記-各自的使用時機" tabindex="-1">2.1.2 概觀型別推論與註記 - 各自的使用時機 <a class="header-anchor" href="#_2-1-2-概觀型別推論與註記-各自的使用時機" aria-label="Permalink to &quot;2.1.2 概觀型別推論與註記 - 各自的使用時機&quot;">​</a></h3><ul><li><ol><li>核心守則 - <code>TypeScript</code> 的程式碼必須評估各種狀況選擇加上型別註記或者讓程式自行推論。</li></ol></li><li><ol start="2"><li>通常 <code>積極做註記是為了限縮型別的各種可能性</code>，使得程式碼可以減少要處理的例外狀況個數、增加模糊變數或方法使用上的 <code>可讀性</code> 以及讓 <code>TypeScript</code> 編譯器靜態偵測程式，<code>確保型別不會有衝突產生</code>。</li></ol></li><li><ol start="3"><li>如果某段或某行程式碼本身可讀性夠或者是從命名上直覺判斷出型別的機率夠高的話，通常 <code>TypeScript</code> 型別系統的推論機制就已足矣。</li></ol></li></ul><h2 id="_2-2-型別註記-『註記』與『斷言』的差異性" tabindex="-1">2.2 型別註記 - 『註記』與『斷言』的差異性 <a class="header-anchor" href="#_2-2-型別註記-『註記』與『斷言』的差異性" aria-label="Permalink to &quot;2.2 型別註記 - 『註記』與『斷言』的差異性&quot;">​</a></h2><h3 id="_2-2-1-型別註記語法" tabindex="-1">2.2.1 型別註記語法 <a class="header-anchor" href="#_2-2-1-型別註記語法" aria-label="Permalink to &quot;2.2.1 型別註記語法&quot;">​</a></h3><ul><li><ol><li><code>變數的註記</code> - 假設宣告某一變數 <code>foo</code>，並且想將其註記為某型別 <code>T</code> 時，則基本的註記語法格式如下：</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | const&gt; foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><ol start="2"><li><code>函式的宣告與註記</code> - 假設宣告某一函式 <code>bar</code>，並且想將其參數 <code>p₁</code> 到 <code>pn</code> 分別註記為 <code>T₁</code> 到 <code>Tn</code> 時，輸出的型別為 <code>TOutput</code>，則基本的註記語法格式如下：</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂, ..., </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 函式的宣告內容 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><ol start="3"><li><code>變數為函式型別的註記</code> - 假設宣告某一變數 <code>bar</code>，並且想將其註記為某函式型別 <code>T</code> 時，且 <code>T</code> 之參數 <code>p₁</code> 到 <code>pn</code> 分別註記為 <code>T₁</code> 到 <code>Tn</code>時，輸出的型別為 <code>TOutput</code>，則註記於指派運算子左方的註記方式為：</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂, ..., </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TOutput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">declartion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>註記於指派運算子右方，並且合併函式的宣告時，註記方式則如下：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂, ..., </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 函式的宣告內容 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>換成 <code>ES6</code> 箭頭函式的格式則是：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₁, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">₂, ..., </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TOutput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 箭頭函式的宣告內容 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="_2-2-2-型別斷言語法" tabindex="-1">2.2.2 型別斷言語法 <a class="header-anchor" href="#_2-2-2-型別斷言語法" aria-label="Permalink to &quot;2.2.2 型別斷言語法&quot;">​</a></h3><ul><li><h4 id="敘述式-statement-與表達式-expression-的定義與差別" tabindex="-1">敘述式 (Statement) 與表達式 (Expression) 的定義與差別 <a class="header-anchor" href="#敘述式-statement-與表達式-expression-的定義與差別" aria-label="Permalink to &quot;敘述式 (Statement) 與表達式 (Expression) 的定義與差別&quot;">​</a></h4><ul><li><ol><li><code>敘述式</code> 代表的概念是程式 <code>運行</code> 的流程，例如：<code>JavaScript</code> 裡的判斷敘述式 (if...else) 以及迴圈敘述式 (for 或者是 while 迴圈)。</li></ol></li><li><ol start="2"><li><code>表達式</code> 代表的則是程式碼 <code>運算</code> 的流程，並且會將運算結果回傳 (Return)，其中，兩者最關鍵的差異是：『敘述式不會回傳值、表達式則是會』。</li></ol></li></ul></li><li><h4 id="斷言的基礎語法-syntax-of-type-assertion" tabindex="-1">斷言的基礎語法 Syntax of Type Assertion <a class="header-anchor" href="#斷言的基礎語法-syntax-of-type-assertion" aria-label="Permalink to &quot;斷言的基礎語法 Syntax of Type Assertion&quot;">​</a></h4><p>斷言的語法只能用在表達式上，因為 <code>表達式具備回傳的值</code>，敘述式則沒有 - 因此可以『<code>斷言該表達式所運算結果之代表型別</code>』。</p><p>若想將某表達式斷言為型別 <code>T</code>，則寫法為：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>另一種斷言的表現形式為：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_2-2-3-註記-annotation-v-s-斷言-assertion" tabindex="-1">2.2.3 註記 Annotation V.S. 斷言 Assertion <a class="header-anchor" href="#_2-2-3-註記-annotation-v-s-斷言-assertion" aria-label="Permalink to &quot;2.2.3 註記 Annotation V.S. 斷言 Assertion&quot;">​</a></h3><ul><li><code>註記</code> 的意義在於 - 告訴 <code>TypeScript</code> 編譯器，該變數、函式型別必須 <code>遵照</code> 指定的型別，靜態分析時若出現型別不符的相關衝突，<code>TypeScript</code>編譯器就會自動拋出警訊。</li><li><code>斷言</code> 則是強制 <code>覆寫</code> 掉被斷言的表達式之型別結果，通常 <code>用在回傳未知結果的表達式</code>；使用斷言較有機率產生人為上的錯誤，因為 <code>TypeScript</code> 編譯器會果斷忽略斷言過後的表達式的運算結果之型別，採取斷言的型別作動態分析。</li></ul><p>儘管 <code>TypeScript</code> 編譯器會盡量防止錯誤的斷言發生，但使用時還是得小心些！</p><h2 id="_2-3-綜觀-typescript-型別種類" tabindex="-1">2.3 綜觀 TypeScript 型別種類 <a class="header-anchor" href="#_2-3-綜觀-typescript-型別種類" aria-label="Permalink to &quot;2.3 綜觀 TypeScript 型別種類&quot;">​</a></h2><h3 id="_2-3-1-原始型別-primitive-types" tabindex="-1">2.3.1 原始型別 Primitive Types <a class="header-anchor" href="#_2-3-1-原始型別-primitive-types" aria-label="Permalink to &quot;2.3.1 原始型別 Primitive Types&quot;">​</a></h3><ul><li><code>number</code></li><li><code>string</code></li><li><code>boolean</code></li><li><code>undefined</code></li><li><code>null</code></li><li><code>void</code></li><li><code>symbol</code></li></ul><h3 id="_2-3-2-物件型別-object-types" tabindex="-1">2.3.2 物件型別 Object Types <a class="header-anchor" href="#_2-3-2-物件型別-object-types" aria-label="Permalink to &quot;2.3.2 物件型別 Object Types&quot;">​</a></h3><ul><li><h4 id="javascript-物件範疇" tabindex="-1">JavaScript 物件範疇 <a class="header-anchor" href="#javascript-物件範疇" aria-label="Permalink to &quot;JavaScript 物件範疇&quot;">​</a></h4><ul><li><ol><li>只要是非原始型別的資料，通通可以被歸類為 <code>JavaScript</code> 物件。</li></ol></li><li><ol start="2"><li><code>JavaScript</code> 物件的表現形式主要分成：<code>JSON物件</code>、<code>陣列</code>、<code>函式</code> 與類別建構出來的物件，也就是 <code>實體</code>。</li></ol></li></ul></li><li><h4 id="json-物件的明文表現形式" tabindex="-1">JSON 物件的明文表現形式： <a class="header-anchor" href="#json-物件的明文表現形式" aria-label="Permalink to &quot;JSON 物件的明文表現形式：&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  interest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Maxwell&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  interest: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;drawing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;programming&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><h4 id="陣列型別" tabindex="-1">陣列型別 <a class="header-anchor" href="#陣列型別" aria-label="Permalink to &quot;陣列型別&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Maxwell&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Taipei&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TypeScript 101&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><h4 id="函式型別" tabindex="-1">函式型別 <a class="header-anchor" href="#函式型別" aria-label="Permalink to &quot;函式型別&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">someone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">someone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Hello! \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">someone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="_2-3-3-明文型別-literal-types" tabindex="-1">2.3.3 明文型別 Literal Types <a class="header-anchor" href="#_2-3-3-明文型別-literal-types" aria-label="Permalink to &quot;2.3.3 明文型別 Literal Types&quot;">​</a></h3><ul><li><h4 id="明文的定義-definition-of-literal" tabindex="-1">明文的定義 Definition of &quot;Literal&quot; <a class="header-anchor" href="#明文的定義-definition-of-literal" aria-label="Permalink to &quot;明文的定義 Definition of &quot;Literal&quot;&quot;">​</a></h4> 就是 <code>值 (Value)</code> 的表現方式。<div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 數字明文 Number Literal</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字串明文 String Literal</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 布林值明文 Boolean Literal</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 物件明文 Object Literal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Maxwell&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JSON 物件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Array 物件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函式物件 (ES6 箭頭函式表示方式)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 變數 foo 被限定只能被指派為數字 1、2、3 其中一種</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul><h3 id="_2-3-4-typescript-提供型別-typescript-provided-types" tabindex="-1">2.3.4 TypeScript 提供型別 TypeScript Provided Types <a class="header-anchor" href="#_2-3-4-typescript-提供型別-typescript-provided-types" aria-label="Permalink to &quot;2.3.4 TypeScript 提供型別 TypeScript Provided Types&quot;">​</a></h3><ul><li><h4 id="元組-tuple" tabindex="-1">元組 (Tuple) <a class="header-anchor" href="#元組-tuple" aria-label="Permalink to &quot;元組 (Tuple)&quot;">​</a></h4><p>元組有 <code>元素 (Element) 數量的限制</code>、內部所存的 <code>元素順序 (Order)</code> 與各個元素對應之型別都有嚴格的規定。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Devil Number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><h4 id="列舉-enum" tabindex="-1">列舉 (Enum) <a class="header-anchor" href="#列舉-enum" aria-label="Permalink to &quot;列舉 (Enum)&quot;">​</a></h4><p>將相似性質的資料，用文字描述並且匯聚成的一種型別。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">White</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.Yellow;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="_2-3-5-特殊型別-special-types" tabindex="-1">2.3.5 特殊型別 Special Types <a class="header-anchor" href="#_2-3-5-特殊型別-special-types" aria-label="Permalink to &quot;2.3.5 特殊型別 Special Types&quot;">​</a></h3><ul><li><h4 id="any-型別" tabindex="-1">any 型別 <a class="header-anchor" href="#any-型別" aria-label="Permalink to &quot;any 型別&quot;">​</a></h4><p>專案裡不確定性存在的型別，通常它會是專案裡混沌的來源。</p></li><li><h4 id="never-型別" tabindex="-1">never 型別 <a class="header-anchor" href="#never-型別" aria-label="Permalink to &quot;never 型別&quot;">​</a></h4><p>專案裡如鬼魅般的存在的型別，你不會注意到它的存在，但它是默默存在各種角落的型別。</p></li><li><h4 id="unknown-型別" tabindex="-1">unknown 型別 <a class="header-anchor" href="#unknown-型別" aria-label="Permalink to &quot;unknown 型別&quot;">​</a></h4><p>專案裡較為安全的不確定性存在的代表型別，主要用來替代 <code>any</code> 型別的狀態。</p></li></ul><h3 id="_2-3-6-進階型別-advanced-types" tabindex="-1">2.3.6 進階型別 Advanced Types <a class="header-anchor" href="#_2-3-6-進階型別-advanced-types" aria-label="Permalink to &quot;2.3.6 進階型別 Advanced Types&quot;">​</a></h3><ul><li><h4 id="泛用型別-generic-types" tabindex="-1">泛用型別 (Generic Types) <a class="header-anchor" href="#泛用型別-generic-types" aria-label="Permalink to &quot;泛用型別 (Generic Types)&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">something</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> something; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>是一種將『型別自身進行 <code>參數化 (Parameterize)</code> 後表現出來的特殊型別』。</p><p>輸入 <code>echo</code> 函式的參數若為型別 <code>T</code>，則其輸出的型別必需等於輸入的值之型別 <code>T</code>。</p></li><li><h4 id="可控索引型別" tabindex="-1">可控索引型別 <a class="header-anchor" href="#可控索引型別" aria-label="Permalink to &quot;可控索引型別&quot;">​</a></h4><p>通常用來鎖定物件的 <code>鍵值對(Key-Value Pair)</code>。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dictionary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Maxwell&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Will always be 18 yrs old.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  reason: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;You will never know.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><h4 id="索引型別-索引列隊操作子" tabindex="-1">索引型別 (索引列隊操作子) <a class="header-anchor" href="#索引型別-索引列隊操作子" aria-label="Permalink to &quot;索引型別 (索引列隊操作子)&quot;">​</a></h4><p>主要功能為動態地檢測『某鍵值對物件有沒有正確地使用到該物件的 <code>屬性(Property</code>)』。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dictionary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Maxwell&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Will always be 18 yrs old.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  reason: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;You will never know.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// info 的型別為 (&#39;name&#39; | &#39;description&#39; | &#39;reason&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><h4 id="複合型別-composite-type" tabindex="-1">複合型別 (Composite Type) <a class="header-anchor" href="#複合型別-composite-type" aria-label="Permalink to &quot;複合型別 (Composite Type)&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 聯集型別 (或)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numOrString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 交集型別 (和)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numAndString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h2 id="本章練習" tabindex="-1"><a href="./../A/typeScript-A.html#第二章-typescript-型別系統概論">本章練習</a> <a class="header-anchor" href="#本章練習" aria-label="Permalink to &quot;[本章練習](../A/typeScript-A.html#第二章-typescript-型別系統概論)&quot;">​</a></h2>`,28)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
