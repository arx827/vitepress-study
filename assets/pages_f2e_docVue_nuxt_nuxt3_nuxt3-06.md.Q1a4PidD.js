import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.B2UkztZl.js";const c=JSON.parse('{"title":"Nuxt3 學習筆記 - Ryan","description":"","frontmatter":{"title":"Nuxt3 學習筆記 - Ryan"},"headers":[],"relativePath":"pages/f2e/docVue/nuxt/nuxt3/nuxt3-06.md","filePath":"pages/f2e/docVue/nuxt/nuxt3/nuxt3-06.md"}'),l={name:"pages/f2e/docVue/nuxt/nuxt3/nuxt3-06.md"};function t(p,s,h,d,r,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="_6-目錄結構與自動載入-auto-imports" tabindex="-1">6. 目錄結構與自動載入 (Auto Imports) <a class="header-anchor" href="#_6-目錄結構與自動載入-auto-imports" aria-label="Permalink to &quot;6. 目錄結構與自動載入 (Auto Imports)&quot;">​</a></h1><h2 id="nuxt-3-的目錄結構" tabindex="-1">Nuxt 3 的目錄結構 <a class="header-anchor" href="#nuxt-3-的目錄結構" aria-label="Permalink to &quot;Nuxt 3 的目錄結構&quot;">​</a></h2><p>完整的 Nuxt 3 專案目錄結構：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nuxt-app/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .nuxt/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assets/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composables/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> content/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> layouts/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> middleware/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node_modules/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugins/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> public/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> routes/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> middleware/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .nuxtignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.config.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nuxt.config.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li><h4 id="nuxt-目錄" tabindex="-1"><code>.nuxt</code> 目錄 <a class="header-anchor" href="#nuxt-目錄" aria-label="Permalink to &quot;\`.nuxt\` 目錄&quot;">​</a></h4><p>開發環境下由 <code>Nuxt</code> 產生出 <code>Vue</code> 的網站，<code>.nuxt</code> 目錄是 <code>自動產生</code> 的，不應該任意的調整裡面檔案。</p></li><li><h4 id="output-目錄" tabindex="-1"><code>.output</code> 目錄 <a class="header-anchor" href="#output-目錄" aria-label="Permalink to &quot;\`.output\` 目錄&quot;">​</a></h4><p>當網站準備部署至正式環境時，每次編譯建構專案時，皆會 <code>自動重新產生</code>，不應該任意的調整裡面檔案。</p></li><li><h4 id="assets-目錄" tabindex="-1"><code>assets</code> 目錄 <a class="header-anchor" href="#assets-目錄" aria-label="Permalink to &quot;\`assets\` 目錄&quot;">​</a></h4><p>靜態資源檔案所放置的位置，目錄內通常包含以下類型的檔案：</p><ul><li><h5 id="css-樣式檔案-css、sass-等" tabindex="-1">CSS 樣式檔案 (CSS、SASS 等…) <a class="header-anchor" href="#css-樣式檔案-css、sass-等" aria-label="Permalink to &quot;CSS 樣式檔案 (CSS、SASS 等…)&quot;">​</a></h5></li><li><h5 id="字型" tabindex="-1">字型 <a class="header-anchor" href="#字型" aria-label="Permalink to &quot;字型&quot;">​</a></h5></li><li><h5 id="圖片" tabindex="-1">圖片 <a class="header-anchor" href="#圖片" aria-label="Permalink to &quot;圖片&quot;">​</a></h5></li></ul><p>這些靜態資源，最終在專案編譯建構時，由 <code>Vite</code> 或 <code>webpack</code> 進行編譯打包。</p></li><li><h4 id="components-目錄" tabindex="-1"><code>components</code> 目錄 <a class="header-anchor" href="#components-目錄" aria-label="Permalink to &quot;\`components\` 目錄&quot;">​</a></h4><p>放置 <code>Vue</code> 元件的地方，<code>Nuxt</code> 會自動載入這個目錄中的任何元件。</p></li><li><h4 id="composables-目錄" tabindex="-1"><code>composables</code> 目錄 <a class="header-anchor" href="#composables-目錄" aria-label="Permalink to &quot;\`composables\` 目錄&quot;">​</a></h4><p>組合式函數放置的目錄，簡單來說可以把常用或通用的功能寫成一個共用的函數或 JS 檔案，放置在這個目錄視為組合式函數，Nuxt 也會自動載入這些組合式函數，讓需要使用的頁面或元件可以直接做使用。</p></li><li><h4 id="content-目錄" tabindex="-1"><code>content</code> 目錄 <a class="header-anchor" href="#content-目錄" aria-label="Permalink to &quot;\`content\` 目錄&quot;">​</a></h4><p>透過使用 <code>Nuxt Content</code>，我們可以在這個目錄下建立 <code>.md</code>、<code>.yml</code>、<code>.csv</code> 和 <code>.json</code> 檔案，<code>Nuxt Content</code> 會讀取並解析這些文件並進行渲染，用來建立基於文件的 <code>CMS</code>。</p></li><li><h4 id="layouts-目錄" tabindex="-1"><code>layouts</code> 目錄 <a class="header-anchor" href="#layouts-目錄" aria-label="Permalink to &quot;\`layouts\` 目錄&quot;">​</a></h4><p>用於放置通用或可能重複使用到的佈局模板，提供程式碼的可重複使用性。</p></li><li><h4 id="middleware-目錄" tabindex="-1"><code>middleware</code> 目錄 <a class="header-anchor" href="#middleware-目錄" aria-label="Permalink to &quot;\`middleware\` 目錄&quot;">​</a></h4><p><code>Nuxt 3</code> 提供了路由中間件的概念，用以在導航到下一個頁面之前執行一些程式碼如權限驗證。</p></li><li><h4 id="node-modules-目錄" tabindex="-1"><code>node_modules</code> 目錄 <a class="header-anchor" href="#node-modules-目錄" aria-label="Permalink to &quot;\`node_modules\` 目錄&quot;">​</a></h4><p>通常有使用 <code>Node.js</code> 的套件管理，例如 <code>NPM</code>，對此目錄應該有一些印象，使用 <code>Nuxt 3</code> 及專案所需要的相依套件都會存放在這個目錄。</p></li><li><h4 id="pages-目錄" tabindex="-1"><code>pages</code> 目錄 <a class="header-anchor" href="#pages-目錄" aria-label="Permalink to &quot;\`pages\` 目錄&quot;">​</a></h4><p>這個目錄主要是用來配置我們的頁面，你也可以只使用 <code>app.vue</code> 來完成你的網站，但如果建立了 <code>pages</code> 這個目錄，<code>Nuxt 3</code> 會自動整合 <code>vue-router</code>，並會依據目錄及檔案結構規則來自動產生出對應路由，也是 <code>Nuxt3</code> 產生路由的方式。</p></li><li><h4 id="plugins-目錄" tabindex="-1"><code>plugins</code> 目錄 <a class="header-anchor" href="#plugins-目錄" aria-label="Permalink to &quot;\`plugins\` 目錄&quot;">​</a></h4><p><code>Nuxt</code> 會自動載入這個目錄檔案，作為插件使用，在檔案名稱可以使用後綴 <code>.server</code> 或 <code>.client</code>，例如， <code>plugin.server.ts</code> 或 <code>plugin.client.ts</code> 來決定只讓伺服器端或客戶端載入這個插件。</p></li><li><h4 id="public-目錄" tabindex="-1"><code>public</code> 目錄 <a class="header-anchor" href="#public-目錄" aria-label="Permalink to &quot;\`public\` 目錄&quot;">​</a></h4><p>這個目錄主要用於伺服器根目錄提供的文件，包含必須固定的檔案名稱如 <code>robots.txt</code> 或不太會變動的 <code>favicon.ico</code>。</p></li><li><h4 id="server-目錄" tabindex="-1"><code>server</code> 目錄 <a class="header-anchor" href="#server-目錄" aria-label="Permalink to &quot;\`server\` 目錄&quot;">​</a></h4><p>用於建立任何後端的邏輯如 <code>後端 API</code>，這個目錄下還包含了 <code>api</code>、<code>server</code> 和 <code>middleware</code> 來區分功能，不具有自動載入，但支援 <code>HMR</code>。</p></li><li><h4 id="gitignore-檔案" tabindex="-1"><code>.gitignore</code> 檔案 <a class="header-anchor" href="#gitignore-檔案" aria-label="Permalink to &quot;\`.gitignore\` 檔案&quot;">​</a></h4><p>在使用 <code>Git</code> 版本控制時，可以設置一些不需要或忽略關注變動的檔案及目錄。</p></li><li><h4 id="nuxtignore-檔案" tabindex="-1"><code>.nuxtignore</code> 檔案 <a class="header-anchor" href="#nuxtignore-檔案" aria-label="Permalink to &quot;\`.nuxtignore\` 檔案&quot;">​</a></h4><p>可以設置讓 <code>Nuxt</code> 編譯建構時，一些不需要或忽略檔案。</p></li><li><h4 id="app-config-ts-檔案" tabindex="-1"><code>app.config.ts</code> 檔案 <a class="header-anchor" href="#app-config-ts-檔案" aria-label="Permalink to &quot;\`app.config.ts\` 檔案&quot;">​</a></h4><p>提供服務運行時暴露給客戶端使用的設定，因此，請不要在 <code>app.config.ts</code> 檔案中添加任何機密資訊。</p></li><li><h4 id="app-vue-檔案" tabindex="-1"><code>app.vue</code> 檔案 <a class="header-anchor" href="#app-vue-檔案" aria-label="Permalink to &quot;\`app.vue\` 檔案&quot;">​</a></h4><p><code>Nuxt 3</code> 網站的入口點元件。</p></li><li><h4 id="nuxt-config-ts-檔案" tabindex="-1"><code>nuxt.config.ts</code> 檔案 <a class="header-anchor" href="#nuxt-config-ts-檔案" aria-label="Permalink to &quot;\`nuxt.config.ts\` 檔案&quot;">​</a></h4><p>用於配置 <code>Nuxt</code> 專案的設定檔。</p></li><li><h4 id="package-json-檔案" tabindex="-1"><code>package.json</code> 檔案 <a class="header-anchor" href="#package-json-檔案" aria-label="Permalink to &quot;\`package.json\` 檔案&quot;">​</a></h4><p>這個檔案裡面定義了專案資訊、腳本、相依套件及版本號，通常有使用 <code>Node.js</code> 套件管理工具建置的專案都會包含此檔案。</p></li><li><h4 id="tsconfig-json-檔案" tabindex="-1"><code>tsconfig.json</code> 檔案 <a class="header-anchor" href="#tsconfig-json-檔案" aria-label="Permalink to &quot;\`tsconfig.json\` 檔案&quot;">​</a></h4><p><code>Nuxt 3</code> 會在 <code>.nuxt</code> 目錄下自動產生一個 <code>tsconfig.json</code> 檔案，其中已經包含了一些解析別名等預設配置； 你可以透過專案目錄下的 <code>tsconfig.json</code> 來配置擴展或覆蓋 <code>Nuxt 3</code> 預設的 <code>TypeScript</code> 設定檔。</p></li></ul><h3 id="自訂目錄名稱" tabindex="-1">自訂目錄名稱 <a class="header-anchor" href="#自訂目錄名稱" aria-label="Permalink to &quot;自訂目錄名稱&quot;">​</a></h3><p>前面簡介了 <code>Nuxt 3</code> 的預設目錄結構與用途，在目錄名稱上 <code>Nuxt 3</code> 也提供了可以調整目錄名稱的方式， 只要在 <code>nuxt.config.ts</code> 修改對應的參數，就可以自訂目錄的名稱。</p><p>不過呢，也並不是所有的目錄都能修改，目前官方提供的 <code>dir</code> 參數共有以下四個目錄參數選項供修改：</p><ul><li><h4 id="layouts" tabindex="-1">layouts <a class="header-anchor" href="#layouts" aria-label="Permalink to &quot;layouts&quot;">​</a></h4></li><li><h4 id="middleware" tabindex="-1">middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;middleware&quot;">​</a></h4></li><li><h4 id="pages" tabindex="-1">pages <a class="header-anchor" href="#pages" aria-label="Permalink to &quot;pages&quot;">​</a></h4></li><li><h4 id="public" tabindex="-1">public <a class="header-anchor" href="#public" aria-label="Permalink to &quot;public&quot;">​</a></h4></li></ul><p>例如我想將 <code>pages</code> 目錄名稱調整為 <code>views</code> 就可以新增下列 <code>dir</code> 設定添加至 <code>nuxt.config.ts</code>，就可以將 <code>pages</code> 目錄功能及規則調整為 <code>views</code> 目錄來實現。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dir: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pages: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;views&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="自動載入-auto-imports" tabindex="-1">自動載入 (Auto Imports) <a class="header-anchor" href="#自動載入-auto-imports" aria-label="Permalink to &quot;自動載入 (Auto Imports)&quot;">​</a></h2><p>在介紹目錄結構時有提到，某些目錄下的檔案是具有 <code>自動載入 (Auto Imports)</code> 的功能，意思就是說，當我們在這些特定的目錄 <code>components</code>、<code>composables</code>、<code>layouts</code>、<code>plugin</code> 添加檔案時，<code>Nuxt 3</code> 會自動載入這些元件或函數，</p><p><code>Nuxt 3</code> 的自動載入具體有以下三種：</p><ul><li><p>Nuxt 常用元件與函數</p></li><li><p>Vue 3 的 API</p></li><li><p>基於目錄的自動載入</p></li><li><h3 id="nuxt-常用元件與函數的自動載入" tabindex="-1"><code>Nuxt</code> 常用元件與函數的自動載入 <a class="header-anchor" href="#nuxt-常用元件與函數的自動載入" aria-label="Permalink to &quot;\`Nuxt\` 常用元件與函數的自動載入&quot;">​</a></h3><p><code>Nuxt</code> 會自動載入一些元件或組合式函數，用以讓開發時可以在全部頁面或定義元件和插件可以使用。</p><p><code>Nuxt</code> 自動載入的元件就好比 <code>app.vue</code> 程式碼內，一開始在 <code>template</code> 就有的 <code>&lt;NuxtWelcome /&gt;</code> 歡迎頁面元件，其他還包含了 <code>&lt;NuxtPage&gt;</code>、<code>&lt;NuxtLayout&gt;</code> 和 <code>&lt;NuxtLink&gt;</code> 等，詳細可以參考<a href="https://v3.nuxtjs.org/api/components" target="_blank" rel="noreferrer">官方文件</a></p><p>例如，下面程式碼中的 <code>useAsyncData</code> 與 <code>$fetch</code> 就是 <code>Nuxt</code> 自動載入的組合式函數，在各個頁面或元件都能做使用。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAsyncData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><h3 id="vue-3-的-api-的自動載入" tabindex="-1">Vue 3 的 API 的自動載入 <a class="header-anchor" href="#vue-3-的-api-的自動載入" aria-label="Permalink to &quot;Vue 3 的 API 的自動載入&quot;">​</a></h3><p>例如，<code>Vue 3</code> 中會使用到的 <code>ref</code>、<code>computed</code> 等這類的 <code>helpers</code> 或 <code>lifecycle hooks</code>，在 <code>Nuxt 3</code> 也都將會自動的載入，不需要在 <code>import</code>。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不需要在 import ref 或 computed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><h3 id="基於目錄的自動載入" tabindex="-1">基於目錄的自動載入 <a class="header-anchor" href="#基於目錄的自動載入" aria-label="Permalink to &quot;基於目錄的自動載入&quot;">​</a></h3><p>如前面所提及的，<code>Nuxt</code> 會自動載入定義在特定目錄的檔案，例如：</p><ul><li><code>components</code>: 相對於 Vue 的元件。</li><li><code>composables</code>: 相對於 Vue 的組合式函數。</li></ul></li></ul><h2 id="建立一個自動導入的元件" tabindex="-1">建立一個自動導入的元件 <a class="header-anchor" href="#建立一個自動導入的元件" aria-label="Permalink to &quot;建立一個自動導入的元件&quot;">​</a></h2><p>我們建立一個 <code>./components/IronManWelcome.vue</code> 檔案：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bg-white py-24&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flex flex-col items-center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text-6xl font-semibold text-sky-400&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2022 iThome&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mt-4 text-9xl font-bold text-gray-600&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;鐵人賽&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在 <code>app.vue</code> 檔案中，新增<code> &lt;IronManWelcome /&gt;</code> 元件。</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">IronManWelcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以發現，我們不需要添加 <code>import IronManWelcome from &#39;./components/IronManWelcome&#39;</code> 就可以直接在 <code>template</code> 直接使用 <code>&lt;IronManWelcome /&gt;</code> 元件，這就是 <code>Nuxt 3</code> 基於目錄的自動載入功能。</p><h2 id="關閉自動載入" tabindex="-1">關閉自動載入 <a class="header-anchor" href="#關閉自動載入" aria-label="Permalink to &quot;關閉自動載入&quot;">​</a></h2><p>如果想關閉 <code>Nuxt</code> 的自動載入元件或函數的功能，可以修改專案目錄下的 <code>nuxt.config.ts</code> 檔案，將 <code>imports.autoImport</code> 設定為 <code>false</code>。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    autoImport: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="顯式載入-explicit-imports" tabindex="-1">顯式載入 (Explicit Imports) <a class="header-anchor" href="#顯式載入-explicit-imports" aria-label="Permalink to &quot;顯式載入 (Explicit Imports)&quot;">​</a></h2><p><code>Explicit</code> (顯式、明確的)，當我們需要手動載入，就可以用 <code>#import</code> 這個 <code>Nuxt</code> 釋出的別名，來個別載入那些具有自動載入的元件或函數。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, computed } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#imports&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,27)]))}const u=a(l,[["render",t]]);export{c as __pageData,u as default};
