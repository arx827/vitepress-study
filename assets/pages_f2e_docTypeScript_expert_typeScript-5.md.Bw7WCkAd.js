import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.B2UkztZl.js";const k=JSON.parse('{"title":"TypeSctipt 邁向專家之路","description":"","frontmatter":{"title":"TypeSctipt 邁向專家之路"},"headers":[],"relativePath":"pages/f2e/docTypeScript/expert/typeScript-5.md","filePath":"pages/f2e/docTypeScript/expert/typeScript-5.md"}'),n={name:"pages/f2e/docTypeScript/expert/typeScript-5.md"};function p(l,s,d,h,r,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="第一篇-typescript-入門準備" tabindex="-1">第一篇 TypeScript 入門準備 <a class="header-anchor" href="#第一篇-typescript-入門準備" aria-label="Permalink to &quot;第一篇 TypeScript 入門準備&quot;">​</a></h1><hr><h1 id="_05-使用-typescript-編譯器" tabindex="-1">05 使用 TypeScript 編譯器 <a class="header-anchor" href="#_05-使用-typescript-編譯器" aria-label="Permalink to &quot;05 使用 TypeScript 編譯器&quot;">​</a></h1><h2 id="_5-1-本章行前準備" tabindex="-1">5-1 本章行前準備 <a class="header-anchor" href="#_5-1-本章行前準備" aria-label="Permalink to &quot;5-1 本章行前準備&quot;">​</a></h2><h3 id="_5-1-1-建立-tools-專案" tabindex="-1">5-1-1 建立 tools 專案 <a class="header-anchor" href="#_5-1-1-建立-tools-專案" aria-label="Permalink to &quot;5-1-1 建立 tools 專案&quot;">​</a></h3><ul><li><p>新增 tools 目錄</p></li><li><p>打開命令提示字元</p></li><li><p>切換到該目錄，執行初始化</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --yes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>如果不加 <code>--yes</code>(或者 <code>-y</code> )，<code>Node.js</code> 會詢問一些建立 <code>package.json</code> 的選項。</p></blockquote></li><li><p>完成後，繼續安裝相關套件</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript@4.3.5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc-watch@4.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p><code>--save-dev</code> 參數，用來告訴 <code>npm</code> 工具，這些是開發時要用的套件、不是隨著應用程式發布的東西，也可以在套件名稱後面使用 <code>@latest</code> 或 去掉 <code>@</code> 及 版本號來下載最新版本。</p></blockquote></li><li><p>建立 <code>TypeScript</code> 編譯器的 組態設定檔，在 tools 目錄下新增一個 <code>tsconfig.json</code> 檔案。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2020&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rootDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>可使用指令來產生 <code>tsconfig.json</code></p></blockquote><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_5-1-2-了解專案的結構" tabindex="-1">5-1-2 了解專案的結構 <a class="header-anchor" href="#_5-1-2-了解專案的結構" aria-label="Permalink to &quot;5-1-2 了解專案的結構&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">\\tools</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  \\dist</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  \\node_modules</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  \\src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    index.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  package-lock.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><table tabindex="0"><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><code>dist</code> (distribution)</td><td>存放 <code>TypeScript</code> 編譯器的輸出結果。</td></tr><tr><td><code>node_modules</code></td><td>存放應用程式與開發工具所需的套件</td></tr><tr><td><code>src</code> (source)</td><td>存放準備要進行編譯的 <code>TypeScript</code> 原始碼檔案』</td></tr><tr><td><code>package-lock.json</code></td><td>這個檔案包含專案套件的完整相依性列表。</td></tr><tr><td><code>package.json</code></td><td>這個檔案包含專案頂層套件的相依性設定。</td></tr><tr><td><code>tsconfig.json</code></td><td>這個檔案包含 <code>TypeScript</code> 編譯器的設定資料</td></tr></tbody></table><h2 id="_5-2-套件管理與-package-json" tabindex="-1">5-2 套件管理與 package.json <a class="header-anchor" href="#_5-2-套件管理與-package-json" aria-label="Permalink to &quot;5-2 套件管理與 package.json&quot;">​</a></h2><h3 id="_5-2-1-使用-npm-安裝套件" tabindex="-1">5-2-1 使用 NPM 安裝套件 <a class="header-anchor" href="#_5-2-1-使用-npm-安裝套件" aria-label="Permalink to &quot;5-2-1 使用 NPM 安裝套件&quot;">​</a></h3><p><code>TypeScript</code> 與 <code>JavaScript</code> 專案的開發必須仰賴許多套件，而這些套件已經發展成豐富的生態系。</p><p><code>Node.js</code> 的 <code>NPM</code> 工具可協助下載這些套件，並將它們加到專案的 <code>node_modules</code> 目錄底下。<code>NPM</code> 會根據它們的相依鏈找出每個套件需要的版本，並下載必須的額外檔案。</p><p>專案根目錄下的 <code>package.json</code> 檔案，便是用來記錄使用者以 <code>npm install</code> 指令加入的套件。</p><table tabindex="0"><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><code>tsc-watch</code></td><td>用來機看原始碼目錄，並且在偵測到變動時，自動啟動編譯器、執行編譯出來的 <code>JavaScript</code> 程式碼，相當於 <code>TypeScript</code> 版本的 <code>nodemon</code> 套件。</td></tr><tr><td><code>typescript</code></td><td>包含 <code>TypeScript</code> 編譯器以及相關工具。</td></tr></tbody></table><ul><li><h4 id="版本號格式" tabindex="-1">版本號格式 <a class="header-anchor" href="#版本號格式" aria-label="Permalink to &quot;版本號格式&quot;">​</a></h4><table tabindex="0"><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>4.3.5</td><td>直接寫出版本編號，表示只接受這個版本，例如：4.3.5版。</td></tr><tr><td>*</td><td>*星號表示接受任何版本</td></tr><tr><td>&gt;4.3.5<br> &gt;=4.3.5</td><td>任何大於、或大於等於此版本的套件均可使用。</td></tr><tr><td>&lt;4.3.5<br> &lt;=4.3.5</td><td>任何小於、或大於等於此版本的套件均可使用。</td></tr><tr><td>~4.3.5</td><td>加上 <code>~</code> 表示修訂版本號 (revision version number, 版本編號三個數字中的最後一個) 以外的版本編號相同即可。</td></tr><tr><td>^4.3.5</td><td>加上 <code>^</code> 表示只要主版號 (major version number) 相同，次版本號 (minor version number) 或 修訂版本號不同也可接受。 以外的版本編號相同即可。</td></tr></tbody></table></li><li><h4 id="常用的-npm-指令" tabindex="-1">常用的 npm 指令 <a class="header-anchor" href="#常用的-npm-指令" aria-label="Permalink to &quot;常用的 npm 指令&quot;">​</a></h4><table tabindex="0"><thead><tr><th>指令</th><th>說明</th></tr></thead><tbody><tr><td><code>npm install</code></td><td>在本地安裝 <code>package.json</code> 設定檔內已記錄的所有套件(NPM 會試著尋找符合條件的最新版本)。</td></tr><tr><td><code>npm install 套件@版本</code></td><td>在本地安裝此套件的指定版本(<code>@latest</code> 代表最新版)，並更新 <code>package.json</code> 檔案裡面的 <code>dependencies</code> 紀錄</td></tr><tr><td><code>npm install 套件</code></td><td>同上，但安裝此套件登陸的最新版本</td></tr><tr><td><code>npm install --save-dev 套件@版本</code><br><code>npm install -D 套件@版本</code></td><td>在本地安裝此討間的指定版本，並更新 <code>package.json</code> 檔案裡的 <code>devDependencies</code> 紀錄。此套件會成為開發所需的套件，而非應用程式的一部分</td></tr><tr><td><code>npm install --global 套件@版本</code><br><code>npm install -g 套件@版本</code></td><td>在全域安裝此套件的指定版本(不會更新專案的 <code>package.json</code>)</td></tr><tr><td><code>npm list</code></td><td>列出所有本地安裝的套件</td></tr><tr><td><code>npm list --global</code><br><code>nmp list --g</code></td><td>列出所有全域安裝的套件</td></tr><tr><td><code>npm run</code></td><td>執行 <code>package.json</code> 檔案中『 <code>scripts</code> 』區塊定義的程式碼</td></tr><tr><td><code>npx 套件</code></td><td>執行一個套件工具。<code>NPX (Node Package Execute)</code> 是附加在 <code>NPM</code> 內的套件執行工具</td></tr></tbody></table></li></ul><blockquote><p>千萬別修改 <code>dist</code> 目錄下的檔案，因為下次執行編譯器時，他們就會被覆蓋。</p></blockquote><h3 id="_5-2-2-了解-typescript-編譯器的組織設定檔案" tabindex="-1">5-2-2 了解 TypeScript 編譯器的組織設定檔案 <a class="header-anchor" href="#_5-2-2-了解-typescript-編譯器的組織設定檔案" aria-label="Permalink to &quot;5-2-2 了解 TypeScript 編譯器的組織設定檔案&quot;">​</a></h3><p><code>TypeScript</code> 的許多功能，譬如靜態型別系統，是透過 <code>TypeScript 編譯器</code> <code>tsc</code> (即 <code>TypeScript Compiler</code>) 來實現的。 <code>TypeScript</code> 程式碼經過它編譯之後，其專屬的關鍵字和表達方式會被 <code>tsc</code> 去掉，生成純 <code>JavaScript</code> 程式碼。</p><p><code>tsc</code> 有許多設定選項，能調整編譯過程的行為。每個 <code>TypeScript</code> 專案都應該建立自己的組態設定檔 (<code>tsconfig.json</code>)，好蓋過預設值</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2020&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rootDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><h4 id="tsconfig-json-組態選項" tabindex="-1">tsconfig.json 組態選項 <a class="header-anchor" href="#tsconfig-json-組態選項" aria-label="Permalink to &quot;tsconfig.json 組態選項&quot;">​</a></h4><table tabindex="0"><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><code>compilerOption</code></td><td>這部分集結了 <code>TypeScript</code> 編譯器自身要使用的設定。</td></tr><tr><td><code>target</code></td><td>指定編譯 <code>JavaScript</code> 程式碼時，要採用的目標版本。</td></tr><tr><td><code>outDir</code></td><td>指定編譯出來的 <code>JavaScript</code> 檔的存放位置。</td></tr><tr><td><code>rootDir</code></td><td>指定要編譯的 <code>TypeScript</code> 檔的存放位置。</td></tr><tr><td><code>files</code></td><td>指定要編譯的檔案。這會蓋過編譯器預設的行為 (讓編譯器自行搜尋檔案來編譯)。</td></tr><tr><td><code>include</code></td><td>以檔名規則指定編譯時要包含哪些檔案。若無特別指定，預設會選擇 <code>.tx</code>, <code>.tsx</code>, 與 <code>.d.ts</code> 副檔名的檔案。</td></tr><tr><td><code>exclude</code></td><td>指定編譯時要排除哪些檔案。</td></tr><tr><td><code>compileOnSave</code></td><td>若為 <code>true</code>，這是在告訴程式編輯器說，說檔案每次儲存後都要執行 <code>tsc 編譯器</code>。不是每個開發環境都支援此功能，更何況 <code>watch</code> 功能反而更實用。</td></tr></tbody></table></li><li><h4 id="檢查編譯器能存取的檔案" tabindex="-1">檢查編譯器能存取的檔案 <a class="header-anchor" href="#檢查編譯器能存取的檔案" aria-label="Permalink to &quot;檢查編譯器能存取的檔案&quot;">​</a></h4><p>如果想確認編譯器在進行編譯時找到了哪些檔案，可在 <code>tsconfig.json</code> 檔案中的 <code>compilerOption</code> 屬性底下加入一行 <code>&quot;listFiles&quot;: true</code> (啟用 listFiles 設定)，或是直接在命令列執行以下命令：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --listFiles</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="_5-3-編譯-typescript-程式" tabindex="-1">5-3 編譯 TypeScript 程式 <a class="header-anchor" href="#_5-3-編譯-typescript-程式" aria-label="Permalink to &quot;5-3 編譯 TypeScript 程式&quot;">​</a></h2><h3 id="_5-3-1-將-typescript-編譯為-javascript" tabindex="-1">5-3-1 將 TypeScript 編譯為 JavaScript <a class="header-anchor" href="#_5-3-1-將-typescript-編譯為-javascript" aria-label="Permalink to &quot;5-3-1 將 TypeScript 編譯為 JavaScript&quot;">​</a></h3><p><code>TypeScript</code> 編譯器在編譯專案時，會檢查 <code>TypeScript</code> 程式碼檔案、套用靜態型別等等的檢查，並且刪去 <code>TypeScript</code> 語法，以便生成純 <code>JavaScript</code> 程式碼。</p><h3 id="_5-3-2-編譯器的錯誤訊息" tabindex="-1">5-3-2 編譯器的錯誤訊息 <a class="header-anchor" href="#_5-3-2-編譯器的錯誤訊息" aria-label="Permalink to &quot;5-3-2 編譯器的錯誤訊息&quot;">​</a></h3><p><code>TypeScript</code> 編譯器會檢查它要編譯的程式碼，確保它符合 <code>JavaScript</code> 語言的規範，並套用靜態型別檢查與存取控制關鍵字等功能，遇到錯誤便會在主控台丟出訊息。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Message: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, TypeScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 傳入型別不正確的引數 (要求字串卻得到數值)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>範例中的 <code>printMessage()</code> 函式對 <code>msg</code> 參數加上了型別註記，限制它的參數 <code>msg</code> 只能接受 <code>string(字串)</code> 資料型別，若將一個數值引數傳給 <code>msg</code> 參數，就會讓 <code>TypeScript</code> 編譯器跳出錯誤訊息。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src/index.ts:5:14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2345:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Argument</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assignable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 錯誤發生位置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在預設狀況下，即使 <code>TypeScript</code> 編譯器遇到錯誤，它仍會繼續生成 <code>JavaScript</code> 程式碼。</p><p>可以在 <code>tsconfig.json</code> 檔案中將 <code>noEmitOnError</code> 設定為 <code>true</code>，即可關閉這個行為。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\tools\\tsconfig.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2020&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rootDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noEmitOnError&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如此一來，<code>TypeScript</code> 編譯器就只有在完全沒有偵測到錯誤時，才會生成 <code>JavaScript</code> 程式碼。</p><h3 id="_5-3-3-使用-watch-模式自動監看並編譯程式碼" tabindex="-1">5-3-3 使用 watch 模式自動監看並編譯程式碼 <a class="header-anchor" href="#_5-3-3-使用-watch-模式自動監看並編譯程式碼" aria-label="Permalink to &quot;5-3-3 使用 watch 模式自動監看並編譯程式碼&quot;">​</a></h3><p>如果每次改寫程式碼，都得手動執行一次編譯器，應該很快就會感到厭倦。</p><p><code>TypeScript</code> 編譯器支援所謂的 <code>watch</code> 模式，它會監看專案的變化，並且在偵測到檔案變更時，自動編譯。</p><p>在 <code>tools</code> 根目錄執行以下指令，開啟編譯器的 <code>watch</code> 模式</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-3-4-在編譯後自動執行" tabindex="-1">5-3-4 在編譯後自動執行 <a class="header-anchor" href="#_5-3-4-在編譯後自動執行" aria-label="Permalink to &quot;5-3-4 在編譯後自動執行&quot;">​</a></h3><p><code>tsc</code> 編譯器的 <code>watch</code> 模式，並不會自動執行編譯完成的程式。</p><p>如果使用的是 <code>Angular</code>、<code>React</code>、<code>Vue.js</code> 等框架來開發專案，<code>TypeScript</code> 編譯器會被整合到更大規模的工具鏈當中，也能夠自動執行編譯完成後的程式碼。</p><p>至於獨立專案，則可仰賴一些開源套件來給編譯器加上額外功能，如 <code>tsc-watch</code> 套件。 <code>tsc-watch</code> 套件會以 <code>watch</code> 模式啟動編譯器，並根據 <code>tsc</code> 的編譯結果來自動執行專案。</p><p>請在 <code>tools</code> 目錄下執行以下指令，使用 <code>npx</code> 啟動安裝於專案內的 <code>tsc-watch</code> 套件</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc-watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --onsuccess</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node dist/index.js&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>tsc-watch</code> 會使用安裝在專案內的 <code>TypeScript</code> 編譯器來編譯。 <code>--onsuccess</code> 參數的意思是，若編譯過程沒有錯誤時，就執行後面雙引號間的命令。</p><blockquote><p>若對 <code>tsc-watch</code> 的其他控制選項有興趣，可<a href="https://github.com/gilamran/tsc-watch" target="_blank" rel="noreferrer">參閱</a></p></blockquote><blockquote><p><code>TypeScript</code> 編譯器亦有提供一套 <code>API</code>，可用來創造自訂編譯器。<a href="https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API" target="_blank" rel="noreferrer">參考</a></p></blockquote><h3 id="_5-3-5-以-npm-啟動自動編譯器" tabindex="-1">5-3-5 以 NPM 啟動自動編譯器 <a class="header-anchor" href="#_5-3-5-以-npm-啟動自動編譯器" aria-label="Permalink to &quot;5-3-5 以 NPM 啟動自動編譯器&quot;">​</a></h3><p>可以把指令放進 <code>package.json</code> 檔案中的 『<code>scripts</code>』項目，能大幅簡化指令。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\tools\\package.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tools&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Error: no test specified</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &amp;&amp; exit 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsc-watch --onsuccess </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node dist/index.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keywords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ISC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;tsc-watch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.4.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.3.5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>package.json</code> 的 <code>scripts</code> 區，可用來撰寫一些指令碼，簡化執行工具的過程。儲存變更後，在 <code>tools</code> 目錄裡執行下方指令</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_5-4-設定編譯輸出版本" tabindex="-1">5-4 設定編譯輸出版本 <a class="header-anchor" href="#_5-4-設定編譯輸出版本" aria-label="Permalink to &quot;5-4 設定編譯輸出版本&quot;">​</a></h2><h3 id="_5-4-1-指定要輸出的-javascript-版本" tabindex="-1">5-4-1 指定要輸出的 <code>JavaScript</code> 版本 <a class="header-anchor" href="#_5-4-1-指定要輸出的-javascript-版本" aria-label="Permalink to &quot;5-4-1 指定要輸出的 \`JavaScript\` 版本&quot;">​</a></h3><p>在開發階段得以運用較新的 <code>TypeScript</code> 功能，又能讓編譯出來的程式在較舊的 <code>JavaScript</code> 環境執行 (如舊版瀏覽器)。</p><p><code>tsconfig.json</code> 編譯選項中的 <code>target</code> 可用來指定編譯器輸出的 <code>JavaScript</code> 版本。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\tools2\\tsconfig.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2020&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rootDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noEmitOnError&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p><code>es2020</code> 便代表編譯目標為 <code>ES2020</code> 版的 <code>JavaScript</code>。 <code>ES</code> 是 <code>ECMAScript</code> 的縮寫，近期已改用釋出年份來稱呼。</p></blockquote><p>下表列出可選擇的版本：</p><table tabindex="0"><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><code>es3</code></td><td>輸出符合第3版規範的程式碼 (制定於1999年)，也被視為 <code>JavaScript</code> 的最基礎版本。若沒有設定 <code>target</code> 屬性，編譯器的預設值就是 <code>es3</code>。(第4版被廢棄，沒有推出。)</td></tr><tr><td><code>es5</code></td><td>輸出符合第5版規範的程式碼 (制定於2009年)，主要重點在於改進一致性、提供嚴格模式、<code>let</code> 關鍵字等。</td></tr><tr><td><code>es6</code><br><code>es2015</code></td><td>輸出 <code>ES2015/ES6</code> 版程式碼 (制定於2015年)。這版提出許多新語法，包括類別、模組、箭頭函式與 <code>Promise</code> 物件的支援，若要用 <code>JavaScript</code> 開發複雜的應用程式，就至少得使用此版本。</td></tr><tr><td><code>es2016</code></td><td>輸出 <code>ES2016</code> 程式碼。這個版本替陣列新增 <code>includes</code> 方法，並支援 <code>**</code> 指數算符。</td></tr><tr><td><code>es2017</code></td><td>輸出 <code>ES2017</code> 程式碼。新功能包括檢視物件與非同步運算的新關鍵字。</td></tr><tr><td><code>es2018</code></td><td>輸出 <code>ES2018</code> 程式碼。新功能包括展開與其餘運算子、字串處理，以及非同步運算的優化。</td></tr><tr><td><code>es2019</code></td><td>輸出 <code>ES2019</code> 程式碼。新功能包括陣列和<code>Object</code> 提供的一些新方法。</td></tr><tr><td><code>es2020</code></td><td>輸出 <code>ES2020</code> 程式碼。新功能包括 <code>BigInt</code> 型別、零值合併算符和 <code>globalThis</code> 關鍵字。</td></tr><tr><td><code>es2021</code></td><td>輸出 <code>ES2021</code> 程式碼。新功能包括 <code>replaceAll()</code> 函式、邏輯指派算符並改良 <code>ES2020</code> 的一些功能。</td></tr><tr><td><code>esNext</code></td><td>採用預定於未來規範版本加入，而安裝的 <code>TypeScript</code> 也支援的新功能。注意 <code>TypeScript</code> 編譯器支援的新功能，將隨編譯器版本而有所更動，所以得謹慎使用。</td></tr></tbody></table><h3 id="_5-4-2-設定編譯時要加入的函式庫" tabindex="-1">5-4-2 設定編譯時要加入的函式庫 <a class="header-anchor" href="#_5-4-2-設定編譯時要加入的函式庫" aria-label="Permalink to &quot;5-4-2 設定編譯時要加入的函式庫&quot;">​</a></h3><p><code>tsc --listFiles</code> 指令會列出編譯器找到的檔案清單，其中包含不少型別宣告檔。這些檔案提供編譯器所需的資訊，包括不同版本的 <code>JavaScript</code> 所擁有的功能，以及應用程式在瀏覽器環境執行時能夠擁有的功能，這樣程式就得以透過 <code>DOM (Document Object Model，文件物件模型)</code> 的 <code>API</code> 來生成與管理 <code>HTML</code> 網頁內容。</p><p><code>TypeScript</code> 編譯器會根據 <code>target</code> 屬性的設定內容，去尋找它需要的型別資訊，因此當使用比指定版本還新的功能時，就會產生錯誤 (編譯器會找不到辦法在舊版 <code>JavaScript</code> 產生對應版本)。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\tools2\\src\\index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Message: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, TypeScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;London&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Paris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} lives in \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>Map</code> 是 <code>ES2015</code> 才加入 <code>JavaScript</code> 的功能，它並不存在於我們的組態檔中指定的 <code>ES5</code> 版本。因此當儲存這段變更和重新編譯時，編譯器會跳出以下警告訊息，建議將編譯目標改成 <code>ES2015</code> 或更晚的版本：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">\\tools2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src/index.ts:5:16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2583:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Map&#39;.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Do</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> need</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> change</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> library?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Try</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lib&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> option</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es2015&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> later.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 ~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可用兩種方式解決這個問題。一是把編譯目標改成較新版本的 <code>JavaScript</code> (比如錯誤訊息中建議的 <code>es2015</code>)，或是在 <code>compilerOptions</code> 中透過 <code>lib</code> 屬性來改變編譯器要使用的型別宣告檔。<code>lib</code> 屬性的值是個陣列，可包含的項目如下表：</p><p><code>compilerOptions</code> 中 <code>lib</code> 屬性的選項</p><table tabindex="0"><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><code>es5</code>、<code>es2015</code>、<br><code>es2016</code>、<code>es2017</code>、...</td><td>引入這幾個值所對應之版本的定義。舊的命名法同樣可用，所以 <code>es6</code> 亦可寫成 <code>es2015</code>。</td></tr><tr><td><code>esnext</code></td><td>引用 <code>JavaScript</code> 預定新增、但尚未正式採用的新功能，其實際內容將隨時間而改變。</td></tr><tr><td><code>dom</code></td><td>引入 <code>DOM</code> 文件物件模型的相關定義，<code>console</code> 物件也是定義在這裡。網頁應用程式需要依賴它們來操作瀏覽器內的 <code>HTML</code> 元素內容。這個設定同樣可用於 <code>Node.js</code> 應用程式。</td></tr><tr><td><code>dom.iterable</code></td><td>引入 <code>DOM API</code> 的額外相關定義，讓應用程式能走訪 <code>HTML</code> 元素。</td></tr><tr><td><code>scriptHost</code></td><td>引入 <code>Windows Script Host</code> 的相關定義，以便在 <code>Windows</code> 系統自動執行程式。</td></tr><tr><td><code>webworker</code></td><td>引入 <code>web worker</code> 的相關定義，讓網頁應用程式得以執行背景工作。</td></tr></tbody></table><p>也可以透過 <code>lib</code> 屬性選擇性地加入特定 <code>JavaScript</code> 版本的部分功能。下面列出最常用的部分： <code>compilerOptions</code> 中 <code>lib</code> 屬性常用的個別版本功能：</p><table tabindex="0"><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td><code>es2015.core</code></td><td>加入 <code>ES2015</code> 新增到 <code>JavaScript</code> 的主要功能的定義。</td></tr><tr><td><code>es2015.collection</code></td><td>加入 <code>Map</code> 與 <code>Set</code> 集合的定義。</td></tr><tr><td><code>es2015.generator</code><br><code>es2015.iterable</code></td><td>加入走訪器與產生器的定義。</td></tr><tr><td><code>es2015.promise</code></td><td>加入 <code>promise</code> 非同步處理機制的定義。</td></tr><tr><td><code>es2015.reflect</code></td><td>加入 <code>reflection</code> 功能的定義，可讓我們存取物件屬性和原型。</td></tr><tr><td><code>es2015.symbol</code><br><code>es2015.symbol.wellknown</code></td><td>加入 <code>symbol</code> 相關的定義。</td></tr><tr><td><code>es2016.array.include</code></td><td>加入 <code>ES2016</code> 陣列的 <code>include()</code> 方法。</td></tr></tbody></table><blockquote><p>這些其實就是型別宣告檔的檔名。可以在 <a href="https://github.com/microsoft/TypeScript/tree/main/lib" target="_blank" rel="noreferrer">官方Github</a> 儲存庫找到完整的型別宣告檔列表。將列表中檔案開頭的 <code>lib.</code> 和 副檔名 <code>.d.ts</code> 去掉，就是要寫在 <code>lib</code> 中的名稱。</p></blockquote><p>使用</p><h2 id="_5-5-常用的編譯器設定" tabindex="-1">5-5 常用的編譯器設定 <a class="header-anchor" href="#_5-5-常用的編譯器設定" aria-label="Permalink to &quot;5-5 常用的編譯器設定&quot;">​</a></h2><h2 id="_5-6-本章總結" tabindex="-1">5-6 本章總結 <a class="header-anchor" href="#_5-6-本章總結" aria-label="Permalink to &quot;5-6 本章總結&quot;">​</a></h2>`,76)]))}const E=i(n,[["render",p]]);export{k as __pageData,E as default};
