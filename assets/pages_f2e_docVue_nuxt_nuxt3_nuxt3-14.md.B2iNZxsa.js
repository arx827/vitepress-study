import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.B2UkztZl.js";const l="/vitepress-study/assets/nuxt3_14_01.D2UFKUoe.png",t="/vitepress-study/assets/nuxt3_14_02.CyMMvwyE.png",p="/vitepress-study/assets/nuxt3_14_03.CwzC3bNP.png",r="/vitepress-study/assets/nuxt3_14_04.DT39T44D.png",h="/vitepress-study/assets/nuxt3_14_05.CWtDXGmK.png",d="/vitepress-study/assets/nuxt3_14_06.CaVmI16a.gif",k="/vitepress-study/assets/nuxt3_14_07.CVE_MG-T.png",o="/vitepress-study/assets/nuxt3_14_08.COHi6Jcu.png",c="/vitepress-study/assets/nuxt3_14_09.Ca8uqMBt.png",x=JSON.parse('{"title":"Nuxt3 學習筆記 - Ryan","description":"","frontmatter":{"title":"Nuxt3 學習筆記 - Ryan"},"headers":[],"relativePath":"pages/f2e/docVue/nuxt/nuxt3/nuxt3-14.md","filePath":"pages/f2e/docVue/nuxt/nuxt3/nuxt3-14.md"}'),E={name:"pages/f2e/docVue/nuxt/nuxt3/nuxt3-14.md"};function u(g,s,b,y,m,F){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="_14-server-api-與-nitro-engine" tabindex="-1">14. Server API 與 Nitro Engine <a class="header-anchor" href="#_14-server-api-與-nitro-engine" aria-label="Permalink to &quot;14. Server API 與 Nitro Engine&quot;">​</a></h1><p>本篇將介紹如何在 <code>Nuxt 3</code> 中建置 <code>Server API</code>，在這之前會先介紹一下 <code>Nitro Engine</code> 是什麼東西，<a href="https://github.com/unjs/nitro" target="_blank" rel="noreferrer">Nitro</a> 可能不多人聽過但與 <code>Nuxt 3</code> 息息相關，<code>Nitro</code> 伺服器引擎除了有跨平台支援與多種強大的功能外，更包含了 API 路由的支援，意思就是我們可以直接在基於 <code>Nitro</code> 的 <code>Nuxt 3</code> 上直接開發由後端處理的邏輯或與資料庫互動，再將結果回傳至前端，實作出 <code>Server API</code>。</p><h2 id="nitro-engine" tabindex="-1">Nitro Engine <a class="header-anchor" href="#nitro-engine" aria-label="Permalink to &quot;Nitro Engine&quot;">​</a></h2><p>在開始建置 <code>Sever API</code> 之前，先來介紹一下 <code>Nitro</code> 伺服器引擎，<code>Nuxt 3</code> 的一大特點就是採用了一個名為 <a href="https://github.com/unjs/nitro" target="_blank" rel="noreferrer">Nitro</a> 的 <code>伺服器引擎 (Server Engine)</code>，<code>Nitro</code> 基於 <code>rollup</code> 與 <a href="https://github.com/unjs/h3" target="_blank" rel="noreferrer">h3</a>，為達高效能與可移植性目標而建構的最小<code> HTTP 框架</code>。</p><p><code>Nitro</code> 提供了以下多種功能特色，使得 <code>Nuxt</code> 更佳完善與強大，如同官網所說 <code>Nitro</code> 讓 <code>Nuxt</code> 直接解鎖了新的全端能力。</p><ul><li><h3 id="快速的開發體驗" tabindex="-1">快速的開發體驗 <a class="header-anchor" href="#快速的開發體驗" aria-label="Permalink to &quot;快速的開發體驗&quot;">​</a></h3><p>開箱即用的特性，無需任何配置，就可以啟動具有 <code>hot module reloading</code> 的開發伺服器，寫完程式碼存檔後，就能讓伺服器載入新的程式邏輯。</p></li><li><h3 id="基於檔案的路由" tabindex="-1">基於檔案的路由 <a class="header-anchor" href="#基於檔案的路由" aria-label="Permalink to &quot;基於檔案的路由&quot;">​</a></h3><p>我們只需要專注在建立伺服器的目錄與頁面，就能擁有自動載入與路由的效果。</p></li><li><h3 id="可移植且便攜" tabindex="-1">可移植且便攜 <a class="header-anchor" href="#可移植且便攜" aria-label="Permalink to &quot;可移植且便攜&quot;">​</a></h3><p>基本上 <code>Nuxt 3</code> 使用的依賴套件都在 <code>package.json</code> 檔案的 <code>devDependencies</code> 中，建構正式環境的網站時，<code>Nitro</code> 自動拆分的程式碼與打包出來的 <code>.output</code> 目錄不再需要安裝依賴套件，意味著不再有 <code>node_modules</code>，因此部署時更輕便好攜。</p></li><li><h3 id="混合模式" tabindex="-1">混合模式 <a class="header-anchor" href="#混合模式" aria-label="Permalink to &quot;混合模式&quot;">​</a></h3><p>透過 <code>混合模式 (Hybrid mode)</code> 可以將一部分頁面預渲染產生出靜態頁面，部分頁面是動態的在伺服器或客戶端渲染，讓每個路由頁面有不同的靜態或動態甚至擁有快取規則，這將讓 <code>Nuxt 3</code> 的通用渲染 (<a href="https://v3.nuxtjs.org/guide/concepts/rendering#universal-rendering" target="_blank" rel="noreferrer">Universal Rendering</a>) 方式更進一步成混合渲染 (<a href="https://v3.nuxtjs.org/guide/concepts/rendering#hybrid-rendering" target="_blank" rel="noreferrer">Hybrid Rendering</a>) 也能結合無伺服器 (Serverless) 來配置混合模式。</p></li></ul><p>看到這裡，可以發現 <code>Nuxt 3</code> 與 <code>Nitro</code> 都下了非常大的功夫，雖然還有些功能尚未穩定與需要改進的地方，但是已經為開發上提供了強大支援與良好的體驗，更多特性與細節可以參考 <a href="https://v3.nuxtjs.org/guide/concepts/server-engine" target="_blank" rel="noreferrer">Nuxt 3 - Server Engine</a> 或 <a href="https://nitro.unjs.io/" target="_blank" rel="noreferrer">Nitro</a> 官方。</p><h2 id="nuxt-3-的-server-目錄" tabindex="-1">Nuxt 3 的 Server 目錄 <a class="header-anchor" href="#nuxt-3-的-server-目錄" aria-label="Permalink to &quot;Nuxt 3 的 Server 目錄&quot;">​</a></h2><p>我們可以透過 <code>Nuxt 3</code> 專案下的 <code>server</code> 目錄來建立具有 <code>hot module reloading</code> 支援的 <code>Server API</code> 與後端處理邏輯。</p><p><code>server</code> 目錄常用的有下面三個子目錄：</p><ul><li><p><code>api</code></p><p>在這個目錄的檔案，將會由 <code>Nuxt</code> 自動載入並產生 <code>/api</code> 開頭的路由並對應檔案名稱，例如建立 <code>./server/api/hello.js</code>，就會擁有 <code>/api/hello</code> 的路由對應這個 API，可以使用 <code>http://localhost:3000/api/hello</code> 訪問該路由。</p></li><li><p><code>routes</code></p><p>在這個目錄的檔案，將會由 <code>Nuxt</code> 自動載入並產生對應檔案名稱的路由，例如建立 <code>./server/routes/world.js</code>，就會擁有 <code>/world</code> 的路由對應這個 API，可以使用 <code>http://localhost:3000/world</code> 訪問該路由。</p></li><li><p><code>middleware</code></p><p>在這個目錄的檔案，會被 <code>Nuxt</code> 自動載入，並添加至伺服器中間件，並在每個 <code>Request</code> 進入伺服器 API 的路由前執行。</p></li><li><h3 id="建立第一個伺服器-api" tabindex="-1">建立第一個伺服器 API <a class="header-anchor" href="#建立第一個伺服器-api" aria-label="Permalink to &quot;建立第一個伺服器 API&quot;">​</a></h3><p><code>Nuxt</code> 會自動掃描 <code>server</code> 目錄中的檔案結構，建立 <code>Server API</code> 時通常以 <code>.js</code> 或 <code>.ts</code> 作為副檔名，並依照官方建議，每個檔案都應該預設匯出 <code>defineEventHandler()</code> 函數，並在其 <code>handler</code> 內實作處理邏輯。</p><p><code>handler</code> 接收了一個 <code>event</code> 參數，用來解析請求的資料，並可以直接回傳一個 <code>字串</code>、<code>JSON</code>、<code>Promise</code> 或者使用 <code>event.res.end()</code> 送出請求回應。</p><p>舉例來說，我們建立一個檔案 <code>./server/api/hello.js</code>，內容如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如同 <code>pages</code> 頁面路由一樣，在 <code>./server/api</code> 目錄下會基於檔案系統結構來產生出相對應的路由，並且會添加一個路由前綴 <code>/api</code>，現在，可以使用 <code>http://localhost:3000/api/hello</code> 訪問該路由，看見回傳的 JSON 資料。 <img src="`+l+`" alt="nuxt3_14_01"></p></li><li><h3 id="伺服器路由" tabindex="-1">伺服器路由 <a class="header-anchor" href="#伺服器路由" aria-label="Permalink to &quot;伺服器路由&quot;">​</a></h3><ul><li><h4 id="基於檔案的路由-1" tabindex="-1">基於檔案的路由 <a class="header-anchor" href="#基於檔案的路由-1" aria-label="Permalink to &quot;基於檔案的路由&quot;">​</a></h4><p>前面的例子有提到，<code>Server API</code> 的路由是基於檔案結構來自動產生，如果你不想要有 <code>/api</code> 的前綴，可以將 API 處理邏輯檔案，放置在 <code>./server/routes</code> 目錄中。</p><p>舉例來說，以下的檔案結構會產生兩個可以訪問的伺服器 API 路由，分別為 <code>/api/hello</code> 及 <code>/world</code>。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nuxt-app/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> routes/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><h4 id="匹配路由參數" tabindex="-1">匹配路由參數 <a class="header-anchor" href="#匹配路由參數" aria-label="Permalink to &quot;匹配路由參數&quot;">​</a></h4><p>將檔案名稱添加中括號 <code>[]</code>，其中放入欲設定的參數名稱，以此來處理動態路由匹配。</p><p>舉例來說，建立 <code>./server/api/hello/[name].js</code> 檔案，內容如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.context.params</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Hello, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 <code>handler</code> 內就能使用 <code>event.context.params</code> 來訪問 <code>name</code> 路由參數。 <img src="`+t+`" alt="nuxt3_14_02"></p></li><li><h4 id="匹配-http-請求方法-http-request-method" tabindex="-1">匹配 HTTP 請求方法 (HTTP Request Method) <a class="header-anchor" href="#匹配-http-請求方法-http-request-method" aria-label="Permalink to &quot;匹配 HTTP 請求方法 (HTTP Request Method)&quot;">​</a></h4><p>我們可以添加 <code>.get</code>、<code>.post</code>、<code>.put</code> 或 <code>.delete</code> 等檔案名稱後綴，來匹配對應的 <code>HTTP request methods</code>。</p><p>新增 <code>server/api/test.get.js</code>，內容如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;測試 [GET] /api/test&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>新增 <code>server/api/test.post.js</code>，內容如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;測試 [POST] /api/test&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我們使用 <a href="https://www.postman.com/" target="_blank" rel="noreferrer">Postman</a> 來打這兩隻 API，可以看到使用不同的 <code>HTTP Request Method</code>，就會匹配至對應後綴檔案中的 <code>handler</code> 進行處理。</p><ul><li><p><code>[GET] /api/test</code><img src="`+p+'" alt="nuxt3_14_03"></p></li><li><p><code>[POST] /api/test</code><img src="'+r+'" alt="nuxt3_14_04"></p></li></ul><p>從上面的例子，我們建立了 <code>test.get.js</code> 與 <code>test.post.js</code> 檔案，分別對應了 <code>GET</code> 與 <code>POST</code> 方法，如果同一個路由使用了其他方法而無法匹配處理的檔案時，則會回傳 <code>HTTP</code> 狀態碼 <code>405 Method Not Allowed</code> 表示錯誤。 <img src="'+h+`" alt="nuxt3_14_05"></p></li><li><h4 id="匹配包羅萬象的路由-catch-all-route" tabindex="-1">匹配包羅萬象的路由 (Catch-all Route) <a class="header-anchor" href="#匹配包羅萬象的路由-catch-all-route" aria-label="Permalink to &quot;匹配包羅萬象的路由 (Catch-all Route)&quot;">​</a></h4><p>你可以建立 <code>[…].js</code> 的檔案，來將所有 <code>不匹配</code> 的路由交由這個 <code>header</code> 作處理。</p><p>例如，建立 <code>./server/api/catch-all/[…].js</code>，將可以匹配 <code>/api/catch-all/x</code>、<code>/api/catch-all/x/y</code> 等 <code>/catch-all</code> 下所有層級的路由。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      url: event.path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/catch-all 下不匹配的路由都會進入這裡&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>建立 <code>./server/api/[…].js</code> 檔案如下，將可以接手所有 <code>/api</code> 下無法匹配的路由。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      url: event.path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api 下不匹配的路由都會進入這裡&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>下圖示範中，當我們輸入的路由如果沒有辦法處理，將會被 <code>[...].js</code> 所匹配，以此我們可以來實作返回、重新導向或錯誤頁面。 <img src="`+d+`" alt="nuxt3_14_06"></p></li></ul></li><li><h3 id="伺服器中間件" tabindex="-1">伺服器中間件 <a class="header-anchor" href="#伺服器中間件" aria-label="Permalink to &quot;伺服器中間件&quot;">​</a></h3><p><code>Nuxt</code> 會自動載入 <code>./server/middleware</code> 中的檔案，並添加至伺服器中間件，伺服器的中間件與路由中間件不同的是， <code>pages</code> 路由頁面的請求是不會執行伺服器中間件。</p><p>伺服器的中間件會在每個 <code>Request</code> 進入伺服器 API 的路由前執行，通常用來添加或檢查請求的 <code>標頭 (headers)</code>、<code>記錄請求</code> 或 <code>擴展調整請求</code>的物件。</p><blockquote><p>伺服器中間件的處理邏輯，不應該回傳任何內容，也不應中斷或直接回應請求，伺服器中間件應該僅檢查、擴展請求上下文或直接拋出錯誤。</p></blockquote><p>舉理來說，你可以新增 <code>./server/middleware/log.js</code> 用來記錄每個請求的 <code>URL</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New request: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或者，新增 <code>./server/middleware/auth.js</code> 用來解析請求或擴展請由物件。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.context.auth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ryan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><h3 id="伺服器插件" tabindex="-1">伺服器插件 <a class="header-anchor" href="#伺服器插件" aria-label="Permalink to &quot;伺服器插件&quot;">​</a></h3><p><code>Nuxt</code> 會自動掃描並載入 <code>./server/plugins</code> 目錄下的檔案，並將他們註冊為 <code>Nitro</code> 的插件，在 <code>Nitro</code> 啟動時，這些插件將會在伺服器載入並執行，插件允許擴展 <code>Nitro</code> 執行時的行為及連接到生命週期的事件。</p><p>更多細節可以參考 <a href="https://nitro.unjs.io/guide/advanced/plugins" target="_blank" rel="noreferrer">Nitro Plugins</a>。</p><ul><li><h4 id="伺服器通用功能" tabindex="-1">伺服器通用功能 <a class="header-anchor" href="#伺服器通用功能" aria-label="Permalink to &quot;伺服器通用功能&quot;">​</a></h4><code>Nuxt</code> 中伺服器的路由，是由 <a href="https://github.com/unjs/h3" target="_blank" rel="noreferrer">unjs/h3</a> 所提供，<code>h3</code> 內建一些方便實用的 <code>helpers</code>，可以參考 <a href="https://www.jsdocs.io/package/h3#package-index-functions" target="_blank" rel="noreferrer">Available H3 Request Helpers</a>。</li></ul></li><li><h3 id="伺服器路由常用的-http-請求處理" tabindex="-1">伺服器路由常用的 HTTP 請求處理 <a class="header-anchor" href="#伺服器路由常用的-http-請求處理" aria-label="Permalink to &quot;伺服器路由常用的 HTTP 請求處理&quot;">​</a></h3><ul><li><h4 id="處理-http-請求中的-body" tabindex="-1">處理 HTTP 請求中的 Body <a class="header-anchor" href="#處理-http-請求中的-body" aria-label="Permalink to &quot;處理 HTTP 請求中的 Body&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可以使用 <code>readBody(event)</code> 來解析請求中的 <code>Body</code>，注意 <code>readBody()</code> 是一個異步函數，記得 <code>await</code> 等待解析完成。</p><p><img src="`+k+`" alt="nuxt3_14_07"></p></li><li><h4 id="處理-url-中的查詢參數-query-parameters" tabindex="-1">處理 URL 中的查詢參數 (Query Parameters) <a class="header-anchor" href="#處理-url-中的查詢參數-query-parameters" aria-label="Permalink to &quot;處理 URL 中的查詢參數 (Query Parameters)&quot;">​</a></h4><p>可以使用 <code>getQuery(evnet)</code> 來解析查詢參數。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: query.name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>當請求 URL 為 <code>/api/query?name=ryan</code>，可以解析出查詢參數 <code>query.name</code>。</p><p><img src="`+o+`" alt="nuxt3_14_08"></p></li><li><h4 id="解析-http-請求所夾帶的-cookie" tabindex="-1">解析 HTTP 請求所夾帶的 Cookie <a class="header-anchor" href="#解析-http-請求所夾帶的-cookie" aria-label="Permalink to &quot;解析 HTTP 請求所夾帶的 Cookie&quot;">​</a></h4><p>可以使用 <code>parseCookies(event)</code> 來解析請求所夾帶的 <code>Cookie</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cookies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseCookies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cookies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我透過瀏覽器的開發工具，手動添加了一組 <code>cookie</code> 名為 <code>token</code>，<code>Server API</code> 可以透過 <code>parseCookies()</code> 來解析出瀏覽器自動夾帶的 <code>cookie</code>。</p><p><img src="`+c+`" alt="nuxt3_14_09"></p></li></ul></li><li><h3 id="進階使用範例" tabindex="-1">進階使用範例 <a class="header-anchor" href="#進階使用範例" aria-label="Permalink to &quot;進階使用範例&quot;">​</a></h3><ul><li><h4 id="nitro-配置" tabindex="-1">Nitro 配置 <a class="header-anchor" href="#nitro-配置" aria-label="Permalink to &quot;Nitro 配置&quot;">​</a></h4><p>你可以在 <code>nuxt.config.ts</code> 中使用 <code>nitro</code> 屬性來配置 <a href="https://nitro.unjs.io/config" target="_blank" rel="noreferrer">Nitro 設定</a>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // https://nitro.unjs.io/config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nitro: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><h4 id="使用巢狀路由" tabindex="-1">使用巢狀路由 <a class="header-anchor" href="#使用巢狀路由" aria-label="Permalink to &quot;使用巢狀路由&quot;">​</a></h4><p>你可以直接使用 <code>h3</code> 的 <code>createRouter()</code> 方法來建立巢狀路由。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createRouter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;h3&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li><li><h3 id="伺服器儲存" tabindex="-1">伺服器儲存 <a class="header-anchor" href="#伺服器儲存" aria-label="Permalink to &quot;伺服器儲存&quot;">​</a></h3><p><code>Nitro</code> 提供了一個跨平台的<a href="https://nitro.unjs.io/guide/introduction/storage" target="_blank" rel="noreferrer">儲存層</a>，你可以 <code>Nitro</code> 的配置中設定 <code>storage</code> 屬性，來配置額外的儲存掛載位置，官網提供了一個使用 <a href="https://v3.nuxtjs.org/guide/directory-structure/server/#example-using-redis" target="_blank" rel="noreferrer">Redis</a> 的範例。</p><p>更多 <code>Nitro</code> 伺服器的設定與使用可以參考官網。</p></li></ul><h2 id="小結" tabindex="-1">小結 <a class="header-anchor" href="#小結" aria-label="Permalink to &quot;小結&quot;">​</a></h2><p><code>Nitro</code> 伺服器引擎將 <code>Nuxt 3</code> 提升至另一個境界，不僅功能強大且讓開發中擁有不錯的體驗，伺服器路由更是能在後端直接處理邏輯實作 <code>Server API</code>，而下一篇我們將介紹如何在 <code>Nuxt</code> 打 <code>API</code> 取得資料。</p>`,13)]))}const C=a(E,[["render",u]]);export{x as __pageData,C as default};
