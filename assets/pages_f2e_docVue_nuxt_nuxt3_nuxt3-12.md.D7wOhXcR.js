import{_ as a,c as i,o as n,ae as e}from"./chunks/framework.B2UkztZl.js";const l="/vitepress-study/assets/nuxt3_12_01.C6hwAl7O.png",E=JSON.parse('{"title":"Nuxt3 學習筆記 - Ryan","description":"","frontmatter":{"title":"Nuxt3 學習筆記 - Ryan"},"headers":[],"relativePath":"pages/f2e/docVue/nuxt/nuxt3/nuxt3-12.md","filePath":"pages/f2e/docVue/nuxt/nuxt3/nuxt3-12.md"}'),p={name:"pages/f2e/docVue/nuxt/nuxt3/nuxt3-12.md"};function t(h,s,k,r,d,c){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="_12-模組-modules" tabindex="-1">12. 模組 (Modules) <a class="header-anchor" href="#_12-模組-modules" aria-label="Permalink to &quot;12. 模組 (Modules)&quot;">​</a></h1><p>在使用 <code>Nuxt</code> 開發過程中，我們可以透過配置 <code>模組 (Modules)</code> 或 <code>插件 (Plugin)</code> 來進行擴充，在 <a href="./nuxt3-11.html">插件 (Plugins)</a> 一文中，也提到插件可以用來擴充功能；那麼插件與模組又有什麼樣子的差異呢，在這一篇文章中我將與大家分享。</p><h2 id="模組-modules" tabindex="-1">模組 (Modules) <a class="header-anchor" href="#模組-modules" aria-label="Permalink to &quot;模組 (Modules)&quot;">​</a></h2><p><code>Nuxt</code> 提供了一個模組系統來擴展自身框架的核心，也簡化了整合過程中需要的繁瑣配置。當你想擴展 <code>Nuxt</code> 或 <code>Vue</code> 的功能，雖然 <code>Nuxt</code> 可以通過安裝與配置插件進行功能擴展，但是在多個專案或使用上可能繁瑣耗時或重複性很高的，但如果套件已經有針對 <code>Nuxt</code> 模組做整合，我們就不必從頭開始開發或像安裝插件一樣需要建立與維護這些配置。</p><ul><li><h3 id="nuxt-3-中插件與模組的差異" tabindex="-1">Nuxt 3 中插件與模組的差異 <a class="header-anchor" href="#nuxt-3-中插件與模組的差異" aria-label="Permalink to &quot;Nuxt 3 中插件與模組的差異&quot;">​</a></h3><p><code>Nuxt 模組</code> 與 <code>Nuxt 插件</code> 的差異在於，<code>模組載入執行的時間點更早</code>，意思是 <code>Nuxt</code> 在啟動伺服器後，首先會依序的載入模組並執行，接續建立 <code>Nuxt</code> 的環境 (Context) 與 <code>Vue</code> 的實例 (Instance)，最後才開始執行 <code>Nuxt</code> 的插件。</p><p>因此，<code>Nuxt 模組</code> 可以做更多的事情，包含在使用 <code>nuxi dev</code>、<code>nuxi build</code> 啟動或建構 <code>Nuxt</code> 時，可以透過模組來覆蓋模板、配置 <code>webpack</code> 及配置插件等許多任務。</p><ul><li><h4 id="nuxt-3-安裝使用模組" tabindex="-1">Nuxt 3 安裝使用模組 <a class="header-anchor" href="#nuxt-3-安裝使用模組" aria-label="Permalink to &quot;Nuxt 3 安裝使用模組&quot;">​</a></h4><p><code>Nuxt</code> 模組是一個導出異步函數的 <code>JavaScript</code> 檔案，當安裝使用模組時，通常會配置在 <code>nuxt.config.ts</code> 檔案的 <code>modules</code> 中，例如 <a href="https://ithelp.ithome.com.tw/articles/10294705" target="_blank" rel="noreferrer">配置 Nuxt Tailwind 模組</a> 會添加上<code> &#39;@nuxtjs/tailwindcss&#39;</code>。</p><p>通常模組的開發人員會提供這些模組應該如何在 <code>modules</code> 屬性來做配置，甚至一些可選用的參數來配置這些模組。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用套件名稱 (推薦使用)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;@nuxtjs/example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 載入本地目錄的模組</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;./modules/example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加模組的選項參數</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./modules/example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { token: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在行內定義模組</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inlineOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nuxt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul></li></ul><h2 id="nuxt-3-模組列表" tabindex="-1">Nuxt 3 模組列表 <a class="header-anchor" href="#nuxt-3-模組列表" aria-label="Permalink to &quot;Nuxt 3 模組列表&quot;">​</a></h2><p>你可以在 <a href="https://modules.nuxtjs.org/" target="_blank" rel="noreferrer">Explore Nuxt Modules</a> 上尋找由 <code>Nuxt</code> 官方或社群生態所發展建置的模組，<code>Nuxt</code> 的模組通常遵循著官方指南所製，使用時只需要安裝與添加至 <code>nuxt.config</code> 中，基本上就能完成配置。</p><ul><li><h3 id="使用-nuxt-icon-模組" tabindex="-1">使用 Nuxt Icon 模組 <a class="header-anchor" href="#使用-nuxt-icon-模組" aria-label="Permalink to &quot;使用 Nuxt Icon 模組&quot;">​</a></h3><p><code>Nuxt Icon</code> 模組整合了 <code>Iconify</code> 提供多達 100,000 個以上的 Icon 圖示，只要在 <code>Nuxt</code> 中安裝後，我們就可以直接做使用。</p><ul><li><h4 id="step-1-安裝套件" tabindex="-1">Step 1. 安裝套件 <a class="header-anchor" href="#step-1-安裝套件" aria-label="Permalink to &quot;Step 1. 安裝套件&quot;">​</a></h4><p>安裝 <code>Nuxt Icon</code> 模組套件。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nuxt-icon</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><h4 id="step-2-配置使用模組" tabindex="-1">Step 2. 配置使用模組 <a class="header-anchor" href="#step-2-配置使用模組" aria-label="Permalink to &quot;Step 2. 配置使用模組&quot;">​</a></h4><p>在 <code>nuxt.config.ts</code> 中的 <code>modules</code> 屬性，添加 <code>Nuxt Icon</code> 模組的名稱 <code>nuxt-icon</code>。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nuxt-icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><h4 id="step-3-開始使用" tabindex="-1">Step 3. 開始使用 <a class="header-anchor" href="#step-3-開始使用" aria-label="Permalink to &quot;Step 3. 開始使用&quot;">​</a></h4><p>依照說明，我們就可以使用 <code>Nuxt Icon</code> 模組，為我們所添加的元件 <code>&lt;Icon&gt;</code>，這個 Icon 元件可以傳入 <code>name</code> 屬性，以此來顯示不同的 Icon 圖示，<code>size</code> 則可以控制圖示的大小。</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flex justify-center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Icon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logos:nuxt&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;360&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+l+`" alt="nuxt3_12_01"></p></li></ul></li></ul><h2 id="如何建立-nuxt-模組" tabindex="-1">如何建立 Nuxt 模組 <a class="header-anchor" href="#如何建立-nuxt-模組" aria-label="Permalink to &quot;如何建立 Nuxt 模組&quot;">​</a></h2><p><code>Nuxt Kit</code> 是 <code>Nuxt</code> 官方提供的一個標準和方便的 <code>API</code> 來定義 <code>Nuxt</code> 模組。</p><p>通常如下程式碼使用 <code>defineNuxtModule</code> 方法來建立一個模組：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineNuxtModule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@nuxt/kit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模組的名稱，通常也會對應 NPM 發布的套件名稱</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@nuxtjs/example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果有配置這個模組的一些選項，會將其保存在這個設定鍵值下</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sample&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 相容性限制 \`nuxt.config\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compatibility: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 為了控制模組的版本相容性，通常會在這裡配置 Nuxt 版本的需求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nuxt: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^3.0.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 模組預設的選項</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  defaults: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hooks: {},</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moduleOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nuxt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Nuxt 啟動載入模組後，模組所執行的邏輯會在這裡實作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>更多 <code>Nuxt</code> 模組的建立指南可以參考 <a href="https://v3.nuxtjs.org/guide/going-further/modules" target="_blank" rel="noreferrer">Nuxt 3 - Module Author Guide</a>，這邊就不再贅述，畢竟我們比較常為模組的使用者。</p><h2 id="模組的載入" tabindex="-1">模組的載入 <a class="header-anchor" href="#模組的載入" aria-label="Permalink to &quot;模組的載入&quot;">​</a></h2><p>前面我們使用了 <code>Nuxt Icon</code> 模組，我們也可以閱讀一下 <a href="https://github.com/nuxt-modules/icon/tree/v0.1.6" target="_blank" rel="noreferrer">Nuxt Icon v0.1.6</a> 模組套件的原始碼。</p><p>以下是 <code>Nuxt Icon</code> 模組的 <a href="https://github.com/nuxt-modules/icon/blob/v0.1.6/src/module.ts" target="_blank" rel="noreferrer">module.ts</a> 檔案。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModuleOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nuxt-icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compatibility: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nuxt: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^3.0.0-rc.9&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  defaults: {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nuxt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      global: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      filePath: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./runtime/Icon.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>Nuxt</code> 的模組使用了一個 <code>defineNuxtModule</code> 方法來定義模組，也可以視為模組的入口點，<code>meta.name</code> 對應的就是模組的名稱，也是我們添加至 <code>modules</code> 屬性所需要的模組名稱。</p><p><code>setup</code> 就是模組載入後執行的函數，可以看到模組使用 <code>addComponent</code> 為我們 <code>Nuxt</code> 添加了一個元件名稱為 <code>Icon</code>，使用的元件檔案來自 <code>./runtime/Icon.vue</code>。</p><p>模組中的 <a href="https://github.com/nuxt-modules/icon/blob/v0.1.6/src/runtime/Icon.vue" target="_blank" rel="noreferrer">runtime/Icon.vue</a> 為我們封裝了 <code>Iconify</code> 圖示的使用邏輯以及取得 <code>Nuxt</code> 配置的參數等。</p><p>透過模組我們可以省去這些繁瑣的封裝與配置，只需要專注在配置模組與開發上面。</p><h2 id="小結" tabindex="-1">小結 <a class="header-anchor" href="#小結" aria-label="Permalink to &quot;小結&quot;">​</a></h2><p>模組與插件其實還是存在著載入執行順序與使用情境上的差異性，以 <code>Nuxt</code> 來說，通常 <code>Nuxt 的插件</code> 會是用來封裝及使用 <code>Vue</code> 中會使用到的插件與或套件；而 <code>Nuxt 的模組</code>，會將需要繁瑣配置的套件或插件來與 <code>Nuxt</code> 進行整合與封裝，不論是透過第三方插件或模組，這都將使 <code>Nuxt</code> 在開發與擴充上擁有更多的可能性。</p>`,23)]))}const u=a(p,[["render",t]]);export{E as __pageData,u as default};
