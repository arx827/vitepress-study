import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.B2UkztZl.js";const o=JSON.parse('{"title":"IT邦 - 讓 TypeScript 成為你全端開發的 ACE !","description":"","frontmatter":{"title":"IT邦 - 讓 TypeScript 成為你全端開發的 ACE !"},"headers":[],"relativePath":"pages/f2e/docTypeScript/it/partI/typeScript-5.md","filePath":"pages/f2e/docTypeScript/it/partI/typeScript-5.md"}'),e={name:"pages/f2e/docTypeScript/it/partI/typeScript-5.md"};function p(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_5-typescript-類別基礎" tabindex="-1">5 TypeScript 類別基礎 <a class="header-anchor" href="#_5-typescript-類別基礎" aria-label="Permalink to &quot;5 TypeScript 類別基礎&quot;">​</a></h1><h2 id="_5-1-物件導向基礎概論-oop-fundamentals" tabindex="-1">5.1 物件導向基礎概論 OOP Fundamentals <a class="header-anchor" href="#_5-1-物件導向基礎概論-oop-fundamentals" aria-label="Permalink to &quot;5.1 物件導向基礎概論 OOP Fundamentals&quot;">​</a></h2><ul><li><h3 id="_5-1-1-什麼是物件" tabindex="-1">5.1.1 什麼是物件 <a class="header-anchor" href="#_5-1-1-什麼是物件" aria-label="Permalink to &quot;5.1.1 什麼是物件&quot;">​</a></h3><p>原生 <code>JavaScript</code> 為 <code>原型導向 (Prototype-Based)</code> 語言，它 <code>並沒有物件導向</code> 裡的 <code>物件</code> 的概念；</p><p><code>JavaScript</code> 的物件，單純被定義為：</p><blockquote><p>具備 <code>屬性 (Property)</code> 以及對應的 <code>值 (Value)</code> 的資料結構。</p></blockquote><p>但是 <code>物件導向裡的物件</code> 的概念，確切的定義為：</p><blockquote><p>內含變數、函式以及多種不同資料結構 <code>封裝 (Encapsulate)</code> 成的一種可被操作的介面 -- 就是 <code>物件</code>。</p></blockquote></li><li><h3 id="_5-1-2-實體與建構子函式-instance-constructor-function" tabindex="-1">5.1.2 實體與建構子函式 Instance &amp; Constructor Function <a class="header-anchor" href="#_5-1-2-實體與建構子函式-instance-constructor-function" aria-label="Permalink to &quot;5.1.2 實體與建構子函式 Instance &amp; Constructor Function&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aCat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Julia&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Scottish Fold&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 品種為蘇格蘭摺耳貓</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>從 <code>類別 (Class)</code> 建構出來的物件，就是 <code>實體 (Instance)</code>。</li></ul><blockquote><p>變數 <code>aCat</code> 存的東西，就是類別 <code>Cat</code> 建立出來的物件 (類別 <code>Cat</code> 的 <code>實體</code>)。</p></blockquote><blockquote><p><code>new Cat(...)</code> 就是 <code>建構子函式 (Constructor Function)</code>，建構新的實體時，一定會先接上關鍵字 <code>new</code>。</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">breed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 貓咪的名字</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.breed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> breed;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 貓咪的品種</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 介紹貓咪 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">introduction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`This is \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and it belongs to \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">breed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><h3 id="_5-1-3-類別的宣告形式-class-declaration" tabindex="-1">5.1.3 類別的宣告形式 Class Declaration <a class="header-anchor" href="#_5-1-3-類別的宣告形式-class-declaration" aria-label="Permalink to &quot;5.1.3 類別的宣告形式 Class Declaration&quot;">​</a></h3><p><code>ECMAScript</code> 第六版標準已經有了基礎的類別語言</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Class Cat {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 此為建構子函式，作為初始化實體的地方 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, breed) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 成員變數的初始化 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 貓咪的名字</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.breed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> breed;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 貓咪的品種</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 宣告成員方法 introduction */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  introduction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`This is \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and it belongs to \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">breed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>宣告類別，就是使用 <code>class</code> 關鍵字，<code>建構子函式 (Constructor Function)</code> 則是在 <code>類別裡宣告一個名為 constructor</code> 的函式，裡面的內容是對實體的 <code>初始化 (Initialization)</code> 行為。</p></li><li><h3 id="_5-1-4-物件導向的核心概念" tabindex="-1">5.1.4 物件導向的核心概念 <a class="header-anchor" href="#_5-1-4-物件導向的核心概念" aria-label="Permalink to &quot;5.1.4 物件導向的核心概念&quot;">​</a></h3><ul><li><h4 id="物件導向的基礎概念-fundamentals-of-object-oriented-programming" tabindex="-1">物件導向的基礎概念 Fundamentals of Object-Oriented Programming <a class="header-anchor" href="#物件導向的基礎概念-fundamentals-of-object-oriented-programming" aria-label="Permalink to &quot;物件導向的基礎概念 Fundamentals of Object-Oriented Programming&quot;">​</a></h4><p>兩大主角 -- <code>類別</code> 與 <code>物件</code></p><ul><li><code>類別 (Class)</code> 為物件的藍圖，內部可能包含變數、函式與不同複雜資料結構的組合，主要為描述物件的規格；宣告過後，程式運行過程中，由於不易被更動，所以具備 <code>靜態 (Static)</code> 的性質。</li><li><code>物件 (Object)</code> 則是 <code>擁有屬性與方法的資料型態</code>，而物件又被稱作為建立該物件的類別的 <code>實體 (Instance)</code>，具備高度 <code>異變性(Mutation)</code>，因此才會說具有 <code>動態 (Dynamic)</code> 的性質；通常使用者是不會管物件內部是如何實作的，因為這是物件屬於的類別內部的實作過程，使用者只需要會操作物件提供的屬性與方法就好了。</li></ul><p>三大概念 -- <code>封裝</code>、<code>繼承</code> 與 <code>多型</code></p><ul><li><h5 id="封裝-encapsulation" tabindex="-1">封裝 (Encapsulation) <a class="header-anchor" href="#封裝-encapsulation" aria-label="Permalink to &quot;封裝 (Encapsulation)&quot;">​</a></h5> 描述的是 <code>類別的實作意義</code>，將詳細的實作內容密封在類別內部，外面的使用者不需要去管內部到底長什麼樣子，直接操作類別提供的屬性與方法。</li><li><h5 id="繼承-inheritance" tabindex="-1">繼承 (Inheritance) <a class="header-anchor" href="#繼承-inheritance" aria-label="Permalink to &quot;繼承 (Inheritance)&quot;">​</a></h5> 描述的是 <code>類別的層級關係</code>，可以將類別的實作規格傳遞給繼承的其他類別。</li><li><h5 id="多型-polymorphism" tabindex="-1">多型 (Polymorphism) <a class="header-anchor" href="#多型-polymorphism" aria-label="Permalink to &quot;多型 (Polymorphism)&quot;">​</a></h5> 描述的是 <code>類別與物件的操作多樣性</code>，不同類別的物件可以用相同名稱的規格達到不同種類的功能，以 <code>函式超載 (Function Overloading)</code> 與 <code>覆寫 (Overwriting)</code> 的方式達成。</li></ul></li></ul></li></ul><h2 id="_5-2-typescript-類別語法-class-syntax" tabindex="-1">5.2 TypeScript 類別語法 Class Syntax <a class="header-anchor" href="#_5-2-typescript-類別語法-class-syntax" aria-label="Permalink to &quot;5.2 TypeScript 類別語法 Class Syntax&quot;">​</a></h2><ul><li><h3 id="_5-2-1-類別的宣告-class-declaration" tabindex="-1">5.2.1 類別的宣告 Class Declaration <a class="header-anchor" href="#_5-2-1-類別的宣告-class-declaration" aria-label="Permalink to &quot;5.2.1 類別的宣告 Class Declaration&quot;">​</a></h3><ul><li><ol><li>類別的宣告形同宣告一個新的型別。</li></ol></li><li><ol start="2"><li>類別宣告過程，總共有三大部分要注意：</li></ol><ul><li>成員變數的宣告</li><li>初始化過程</li><li>成員方法的宣告</li></ul></li><li><ol start="3"><li>初始化的過程一律都是使用 <code>建構子函式</code>，也就是名為 <code>constructor</code> 的函式。</li></ol></li><li><ol start="4"><li>在 <code>使用任何成員變數前，一定要先行宣告</code>。</li></ol></li><li><ol start="5"><li>假設宣告類別 <code>C</code>，其成員變數為 <code>V1</code>、<code>V2</code>...、<code>VN</code>，對應型別為 <code>T1</code>、<code>T2</code>...、<code>TN</code>，成員方法則為 <code>M1</code>、<code>M2</code>...、<code>MN</code>，則語法如下：</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  V1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  V2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  VN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 建構子函式的參數 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 初始化流程 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  M1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* M1 的參數 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  M2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* M2 的參數 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* MN 的參數 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><p>請記得，如果成員變數的宣告過程，沒有初始化型別對應的值，就會出現警告訊息。</p><p>除了將成員變數對應的型別與 <code>undefined</code> 進行聯集外，否則宣告的同時將它設定成 <code>選用成員 (Optional Member)</code>，亦或者是在建構子函式內指派初始值。</p></li><li><h3 id="_5-2-2-存取修飾子-access-modifiers" tabindex="-1">5.2.2 存取修飾子 Access Modifiers <a class="header-anchor" href="#_5-2-2-存取修飾子-access-modifiers" aria-label="Permalink to &quot;5.2.2 存取修飾子 Access Modifiers&quot;">​</a></h3><ul><li><ol><li>存取修飾子，主要在 <code>控制類別成員的使用權限</code>。</li></ol></li><li><ol start="2"><li>分成三種模式</li></ol><ul><li>開放 <code>public</code></li><li>私有 <code>private</code></li><li>保護 <code>protected</code></li></ul></li><li><ol start="3"><li>若類別內的成員沒有指定任何存取模式，一切都 <code>預設為開放模式</code>，代表該類別成員，可以在類別內部與外面被使用。</li></ol></li><li><ol start="4"><li>若 <code>僅限定某類別成員在類別內</code> 使用時，可以標註為 <code>私有模式</code>。</li></ol></li><li><ol start="5"><li>若 <code>僅限定某類別成員在類別內</code> 或 <code>繼承該類別的其他類別</code> 使用時，可以標註為 <code>保護模式</code>。</li></ol></li><li><ol start="6"><li>若要標示存取修飾子在某類別 <code>C</code> 的成員時，寫法如下：</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 宣告成員變數 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> protected&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 建構子函式的參數 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 初始化流程 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 宣告成員方法 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> protected&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* M 的參數 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>若建構子函式，有參數可以直接初始化成員變數時，可以將寫法簡化如下：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 宣告建構子函式的參數同時，宣告類別的成員變數 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其餘建構子函式的參數...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 初始化流程 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 宣告成員方法 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> protected&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* M 的參數 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul></li><li><h3 id="_5-2-3-存取方法-accessors" tabindex="-1">5.2.3 存取方法 Accessors <a class="header-anchor" href="#_5-2-3-存取方法-accessors" aria-label="Permalink to &quot;5.2.3 存取方法 Accessors&quot;">​</a></h3><ul><li><ol><li>存取方法，主要是 <code>動態模擬物件屬性的存取與取值行為</code>。</li></ol></li><li><ol start="2"><li><code>取值方法 (Getter Methods)</code> 的宣告，就是在類別成員方法前面標上 <code>get</code> 關鍵字，並且該方法的宣告不能有任何參數。</li></ol></li><li><ol start="3"><li><code>存值方法 (Setter Methods)</code> 的宣告，就是在類別成員方法前面標上 <code>set</code> 關鍵字，並且該方法的宣告一定要有一個參數。</li></ol></li><li><ol start="4"><li>存取方法 <code>可以被標上存取修飾子 (Access Modifiers)</code>，意思是說存取方法可以被設定為開放、私有與保護模式。</li></ol></li></ul></li><li><h3 id="_5-2-4-靜態成員-static-members" tabindex="-1">5.2.4 靜態成員 Static Members <a class="header-anchor" href="#_5-2-4-靜態成員-static-members" aria-label="Permalink to &quot;5.2.4 靜態成員 Static Members&quot;">​</a></h3><ul><li><ol><li>靜態成員主要為 <code>類別本身的屬性與方法</code>。</li></ol></li><li><ol start="2"><li>靜態成員的宣告，必須使用關鍵字 <code>static</code>。</li></ol></li><li><ol start="3"><li>靜態成員也 <code>可以標上存取修飾子 (Access Modifiers)</code>，使得該靜態成員的模式為開放、私有或者是保護狀態。</li></ol></li></ul></li><li><h3 id="_5-2-5-唯讀成員-read-only-members" tabindex="-1">5.2.5 唯讀成員 Read-Only Members <a class="header-anchor" href="#_5-2-5-唯讀成員-read-only-members" aria-label="Permalink to &quot;5.2.5 唯讀成員 Read-Only Members&quot;">​</a></h3><ul><li><h4 id="唯讀成員變數-read-only-members-variables" tabindex="-1">唯讀成員變數 Read-Only Members Variables <a class="header-anchor" href="#唯讀成員變數-read-only-members-variables" aria-label="Permalink to &quot;唯讀成員變數 Read-Only Members Variables&quot;">​</a></h4><ul><li><ol><li>類別宣告成員變數時，可以附上唯讀屬性操作符 <code>readonly</code> 使該成員被設定為 <code>唯讀狀態</code>。</li></ol></li><li><ol start="2"><li>類別靜態屬性，也可以附上唯讀屬性操作符。</li></ol></li></ul></li></ul></li><li><h3 id="_5-2-6-類別繼承-class-inferitance" tabindex="-1">5.2.6 類別繼承 Class Inferitance <a class="header-anchor" href="#_5-2-6-類別繼承-class-inferitance" aria-label="Permalink to &quot;5.2.6 類別繼承 Class Inferitance&quot;">​</a></h3><ul><li><ol><li>類別的繼承過程中，被繼承的類別為 <code>父類別 (Parent Class 或 Super Class)</code>，繼承的類別相對來說就是 <code>子類別 (Child Class 或 Subclass)</code>。</li></ol></li><li><ol start="2"><li>繼承過後的類別，將 <code>擁有父類別的所有開放模式 (Public)</code> 與 <code>保護模式 (Protected) 下的成員</code>。</li></ol></li><li><ol start="3"><li>繼承過後的類別，若想要在初始化過程中，初始化父類別的成員變數，可以 <code>使用關鍵字 super 函式</code>，因為它就是<code>父類別的建構子函式</code>。</li></ol></li><li><ol start="4"><li>類別繼承的語法必須使用關鍵字 <code>extends</code>，宣告方式為：</li></ol><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><h3 id="_5-2-7-抽象類別-abstract-class" tabindex="-1">5.2.7 抽象類別 Abstract Class <a class="header-anchor" href="#_5-2-7-抽象類別-abstract-class" aria-label="Permalink to &quot;5.2.7 抽象類別 Abstract Class&quot;">​</a></h3><ul><li><ol><li>當某個類別被設計為 <code>專門被繼承</code> 時，以及 <code>強制要求開發者必須實踐特定的規格或成員</code> 時，該類別可以被宣告為 <code>抽象類別</code>。</li></ol></li><li><ol start="2"><li>抽象類別既然是專門被繼承用，理論上單獨使用是不合理的，因此 <code>不能拿抽象類別建立實體</code>。</li></ol></li><li><ol start="3"><li>任何繼承抽象類別的 <code>子類別，都必須實踐抽象類別裡的抽象成員</code>。</li></ol></li><li><ol start="4"><li>抽象類別以及任何抽象成員，必須使用關鍵字 <code>abstract</code> 進行宣告。</li></ol></li><li><ol start="5"><li>由於抽象成員被規定是必須實作的規格，因此 <code>抽象成員並無存取權限狀態</code>；也就是說，私有或保護模式的抽象成員是不存在的。</li></ol></li></ul></li></ul><h2 id="_5-3-型別系統中的類別" tabindex="-1">5.3 型別系統中的類別 <a class="header-anchor" href="#_5-3-型別系統中的類別" aria-label="Permalink to &quot;5.3 型別系統中的類別&quot;">​</a></h2><ul><li><h3 id="_5-3-1-型別推論機制" tabindex="-1">5.3.1 型別推論機制 <a class="header-anchor" href="#_5-3-1-型別推論機制" aria-label="Permalink to &quot;5.3.1 型別推論機制&quot;">​</a></h3><p>類別本身自成一種型別</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> breed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> introduction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 略... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* aCat 會被推論為型別 Cat */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aCat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Julia&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Scottish Fold&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>不管類別到底繼承自誰，只要哪個類別初始化實體，就會推論為哪種類別</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> wheels</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeNoise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 略... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> brand</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Car&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* vehicle 會被推論為型別 Vehicle */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vehicle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vehicle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* car 則會被推論為型別 Car */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cadillac&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Black&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><h3 id="_5-3-2-型別註記機制" tabindex="-1">5.3.2 型別註記機制 <a class="header-anchor" href="#_5-3-2-型別註記機制" aria-label="Permalink to &quot;5.3.2 型別註記機制&quot;">​</a></h3><p>可以拿類別名稱來註記</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* definitelyACat 被註記為 Cat 型別 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> definitelyACat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Julia&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Scottish Fold&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>父子繼承關係的類別，子類別除了可以註記為子類別的型別外，也可以選擇註記為父類別的型別。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Car 為 Vehicle 的子類別，註記為 Car 或 Vehicle */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> car1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cadillac&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Black&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> car2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vehicle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cadillac&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Black&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><h4 id="類別的推論與註記機制-type-inference-annotation-of-class" tabindex="-1">類別的推論與註記機制 Type Inference &amp; Annotation of Class <a class="header-anchor" href="#類別的推論與註記機制-type-inference-annotation-of-class" aria-label="Permalink to &quot;類別的推論與註記機制 Type Inference &amp; Annotation of Class&quot;">​</a></h4><ul><li><ol><li>當為註記的變數被指派某類別建構的實體時，<code>推論結果就是該類別建構子的名稱</code>。</li></ol></li><li><ol start="2"><li>子類別建構出的實體，絕對可以指派到被註記為子類別或者是父類別型別的變數中。</li></ol></li><li><ol start="3"><li>父類別建構出的實體，除了可以被指派到被註記為父類別的變數外，如果 <code>繼承的子類別並沒有額外宣告新的成員時，父類別實體也可以被指派到該子類別型別的變數</code>，關鍵都是在看父子類別結構有沒有相等。</li></ol></li></ul></li></ul></li></ul><h2 id="本章練習" tabindex="-1"><a href="./../A/typeScript-A.html#第五章-typescript-類別基礎">本章練習</a> <a class="header-anchor" href="#本章練習" aria-label="Permalink to &quot;[本章練習](../A/typeScript-A.html#第五章-typescript-類別基礎)&quot;">​</a></h2>`,8)]))}const E=i(e,[["render",p]]);export{o as __pageData,E as default};
