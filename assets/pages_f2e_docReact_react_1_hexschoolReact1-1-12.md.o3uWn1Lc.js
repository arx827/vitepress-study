import{_ as s,c as i,o as e,ae as n}from"./chunks/framework.B2UkztZl.js";const k=JSON.parse('{"title":"React 實戰影音課 1","description":"","frontmatter":{"title":"React 實戰影音課 1"},"headers":[],"relativePath":"pages/f2e/docReact/react/1/hexschoolReact1-1-12.md","filePath":"pages/f2e/docReact/react/1/hexschoolReact1-1-12.md"}'),l={name:"pages/f2e/docReact/react/1/hexschoolReact1-1-12.md"};function t(c,a,p,r,o,h){return e(),i("div",null,a[0]||(a[0]=[n(`<h1 id="_12-jsx-開發中常見的錯誤" tabindex="-1">12. JSX 開發中常見的錯誤 <a class="header-anchor" href="#_12-jsx-開發中常見的錯誤" aria-label="Permalink to &quot;12. JSX 開發中常見的錯誤&quot;">​</a></h1><h2 id="打開檔案-intro-commonproblem-html" tabindex="-1">打開檔案 <code>/intro/commonProblem.html</code> <a class="header-anchor" href="#打開檔案-intro-commonproblem-html" aria-label="Permalink to &quot;打開檔案 \`/intro/commonProblem.html\`&quot;">​</a></h2><ul><li><h3 id="_1-定義元件首字一定是大寫" tabindex="-1">1. 定義元件首字一定是大寫 <a class="header-anchor" href="#_1-定義元件首字一定是大寫" aria-label="Permalink to &quot;1. 定義元件首字一定是大寫&quot;">​</a></h3><ul><li>將 <code>app</code> function 改為 <code>App</code> function<div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 改為</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul></li><li><h3 id="_2-多個元素外層需要使用標籤包覆-或使用-react-fragment" tabindex="-1">2. 多個元素外層需要使用標籤包覆，或使用 React.Fragment <a class="header-anchor" href="#_2-多個元素外層需要使用標籤包覆-或使用-react-fragment" aria-label="Permalink to &quot;2. 多個元素外層需要使用標籤包覆，或使用 React.Fragment&quot;">​</a></h3><ul><li>不能存在多個 跟元素</li><li>在最外層增加 <code>&lt;div&gt;&lt;/div&gt;</code></li><li>或在 最外層使用 <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code></li><li><code>React.Fragment</code>，可簡寫成<code>&lt;&gt;&lt;/&gt;</code></li><li><code>return</code> 與後方的 <code>&lt;tag&gt;</code> 標籤必須在同一行，或將後方的 <code>&lt;tag&gt;</code> 使用 <code>()</code> 包覆<div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li><h3 id="_3-沒有正確結尾-結尾不正確" tabindex="-1">3. 沒有正確結尾，結尾不正確 <a class="header-anchor" href="#_3-沒有正確結尾-結尾不正確" aria-label="Permalink to &quot;3. 沒有正確結尾，結尾不正確&quot;">​</a></h3><ul><li>如 <code>&lt;input&gt;</code> 必須加上結尾標籤 <code>&lt;input /&gt;</code></li></ul></li><li><h3 id="_4-屬性轉換名稱運用要正確" tabindex="-1">4. 屬性轉換名稱運用要正確 <a class="header-anchor" href="#_4-屬性轉換名稱運用要正確" aria-label="Permalink to &quot;4. 屬性轉換名稱運用要正確&quot;">​</a></h3><ul><li>將 <code>label</code> 中的 <code>for</code>，改為 <code>htmlFor</code></li><li>將 <code>class</code> 改為 <code>className</code></li><li>將 <code>style</code> 改為 物件形式</li></ul></li></ul>`,3)]))}const u=s(l,[["render",t]]);export{k as __pageData,u as default};
